/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package payroll.subwins;

import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.*;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import payroll.main.db;

/**
 *
 * @author ASUS
 */
public class thirteenmonth extends javax.swing.JDialog {
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    Properties prop = new Properties();
    int a1 ,a;
    double k;
    /**
     * Creates new form thirteenmonth
     */
    public thirteenmonth(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        ae.setSelected(true);
        se.setSelected(false);
        emppanel.setVisible(false);
        setLocationRelativeTo(null);
        
        date();
        table();
        
        location.setText(getValue("dir"));
    }
    public void table(){
       
        try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.month_tbl where code = ?;");
                pst.setString(1,searchCode.getText());
                rs = pst.executeQuery();
                table.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e); 
            }
              
    }
    public void date(){
        java.util.Date cd = GregorianCalendar.getInstance().getTime();
        SimpleDateFormat mf = new SimpleDateFormat("yyyy");
        String code = mf.format(cd);
        searchCode.setText(code+"13MNTH");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        searchCode = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        ae = new javax.swing.JRadioButton();
        se = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        location = new javax.swing.JTextField();
        emppanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        year = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        computeDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        empid = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        empln = new javax.swing.JTextField();
        empfn = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tdw = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        basic = new javax.swing.JTextField();
        empmn = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        code = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tmw = new javax.swing.JTextField();
        com = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("13 Month");
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Basic Salary"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel2.setText("Search by ID:");

        jLabel35.setText("Code");

        id.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idKeyReleased(evt);
            }
        });

        searchCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCodeKeyReleased(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/images/refresh_update.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 625, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "13th Month", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        ae.setBackground(new java.awt.Color(255, 255, 255));
        ae.setText("ALL Employee");
        ae.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aeActionPerformed(evt);
            }
        });

        se.setBackground(new java.awt.Color(255, 255, 255));
        se.setText("Single Employee");
        se.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seActionPerformed(evt);
            }
        });

        jButton1.setText("Print 13th Month Pay Slip");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        location.setText("C:\\");

            javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
            jPanel5.setLayout(jPanel5Layout);
            jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(se, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ae, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 637, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(location)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2)
                        .addComponent(ae))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(se))
                    .addContainerGap())
            );

            emppanel.setBackground(new java.awt.Color(255, 255, 255));
            emppanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee 13th Month Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

            jLabel3.setText("Year:");

            year.setEditable(false);
            year.setBackground(new java.awt.Color(255, 255, 255));
            year.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            jLabel4.setText("Date:");

            computeDate.setEditable(false);
            computeDate.setBackground(new java.awt.Color(255, 255, 255));
            computeDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            jLabel5.setText("Employee's ID:");

            empid.setEditable(false);
            empid.setBackground(new java.awt.Color(255, 255, 255));
            empid.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            jLabel37.setText("Employee's Name");

            empln.setEditable(false);
            empln.setBackground(new java.awt.Color(255, 255, 255));
            empln.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            empfn.setEditable(false);
            empfn.setBackground(new java.awt.Color(255, 255, 255));
            empfn.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            jLabel6.setText("Total Day of Worked:");

            tdw.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            jLabel7.setText("Total 13th Month Pay:");

            total.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            jLabel8.setText("Basic Pay");

            basic.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            empmn.setEditable(false);
            empmn.setBackground(new java.awt.Color(255, 255, 255));
            empmn.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            jLabel36.setText("Code");

            code.setEditable(false);
            code.setBackground(new java.awt.Color(255, 255, 255));
            code.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    codeKeyReleased(evt);
                }
            });

            jLabel9.setText("Total Month of Worked:");

            tmw.setHorizontalAlignment(javax.swing.JTextField.CENTER);

            javax.swing.GroupLayout emppanelLayout = new javax.swing.GroupLayout(emppanel);
            emppanel.setLayout(emppanelLayout);
            emppanelLayout.setHorizontalGroup(
                emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(emppanelLayout.createSequentialGroup()
                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(emppanelLayout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel37)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel36))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, emppanelLayout.createSequentialGroup()
                                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(emppanelLayout.createSequentialGroup()
                                            .addComponent(empid, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4))
                                        .addGroup(emppanelLayout.createSequentialGroup()
                                            .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(computeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(emppanelLayout.createSequentialGroup()
                                    .addComponent(empln, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(empfn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(empmn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, emppanelLayout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel9)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(emppanelLayout.createSequentialGroup()
                                    .addComponent(tdw, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8))
                                .addGroup(emppanelLayout.createSequentialGroup()
                                    .addComponent(tmw, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(total, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                .addComponent(basic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap())
            );
            emppanelLayout.setVerticalGroup(
                emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(emppanelLayout.createSequentialGroup()
                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(empid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(computeDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(empln, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(empfn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(empmn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 21, Short.MAX_VALUE)
                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(basic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tdw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(emppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(tmw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap())
            );

            com.setText("Compute 13th Month");
            com.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    comMouseClicked(evt);
                }
            });
            com.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    comActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addComponent(emppanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(com)))
                    .addContainerGap())
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(com)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(emppanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idKeyReleased
         // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of 13 Month Pay by Typing the ID">
        if(id.getText().equals("")){
            table();
        }else{
            
           try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.month_tbl where emp_id like'%"+id.getText()+"%' order by year desc;");
                
                rs = pst.executeQuery();
                table.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){JOptionPane.showMessageDialog(null, e); }
        }
        //</editor-fold>
    }//GEN-LAST:event_idKeyReleased

    private void searchCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCodeKeyReleased
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of 13 Month Pay by Typing the Last Name">
        if(searchCode.getText().equals("")){
            table();
        }else{
           try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.month_tbl where code like'%"+searchCode.getText()+"%' order by year desc;");
                rs = pst.executeQuery();
                table.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){JOptionPane.showMessageDialog(null, e); }
        }
        //</editor-fold>
    }//GEN-LAST:event_searchCodeKeyReleased

    private void aeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aeActionPerformed
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="All Employee is Seleted">
        ae.setSelected(true);
        se.setSelected(false);
        emppanel.setVisible(false);
        empid.setEnabled(false);
        empfn.setEnabled(false);
        empln.setEnabled(false);
        empmn.setEnabled(false);
        tdw.setEnabled(false);
        year.setEnabled(false);
        computeDate.setEnabled(false);
        total.setEnabled(false);
        basic.setEnabled(false);
        //</editor-fold>
    }//GEN-LAST:event_aeActionPerformed

    private void seActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seActionPerformed
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Single Employee Selected">
        ae.setSelected(false);
        se.setSelected(true);
        emppanel.setVisible(true);
        empid.setEnabled(true);
        empfn.setEnabled(true);
        empln.setEnabled(true);
        empln.setEnabled(true);
        tdw.setEnabled(true);
        year.setEnabled(true);
        computeDate.setEnabled(true);
        total.setEnabled(true);
        basic.setEnabled(true);
        //</editor-fold>
    }//GEN-LAST:event_seActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //KAILANGAN PANG BAGUHIN TO PRE HAHAHAHAHAHA_________________________________________________
        // <editor-fold defaultstate="collapsed" desc="Print 13th Month Pay Slip Function">
        java.util.Date cd = GregorianCalendar.getInstance().getTime();
        SimpleDateFormat mf = new SimpleDateFormat("yyyy");
        String code = mf.format(cd);
        String codes = code+"13MNTH";
        if(ae.isSelected()){
            // <editor-fold defaultstate="collapsed" desc="If All Employee is Selected">
            int p1 = JOptionPane.showConfirmDialog(null, "Do you want to create the 13th Month Pay Slip for all the Employee?","Choose",JOptionPane.YES_NO_OPTION);
            if(p1 == 0){
                Calendar cal =new GregorianCalendar();
                int year;
                year = cal.get(Calendar.YEAR);

                try{
                    pst = conn.prepareStatement("SELECT * FROM payroll_schema.month_tbl where code = ?;");
                    pst.setString(1,codes);
                    rs = pst.executeQuery();
                    while(rs.next()){
                        int x = rs.getInt("emp_id");
                        String y = rs.getString("firstname");
                        String b =rs.getString("lastname");
                        String w =rs.getString("middlename");
                        int dw = rs.getInt("days_work");
                        int mw = rs.getInt("month_work");
                        double bs = rs.getDouble("basic_salary");
                        double ttl = rs.getDouble("total");
                        int yr = rs.getInt("year");
                        String date = rs.getString("date");
                        // <editor-fold defaultstate="collapsed" desc="Create 13th month payslip txt file to all the Employee">
                        do{
                            try{
                                File file = new File(x+""+y+""+b+"13thMothPaySlip.pdf");
                                File file1 = new File(location.getText()+"\\13thMonthRecords\\13thMonthPay"+year);
                                boolean exist = file1.exists();
                                if(exist == true){
                                    try{
                                        if(file.exists()){
                                            file.delete();
                                        }else if(!file.exists()){
                                            //file.createNewFile();
                                        }
                                        //file.createNewFile();
                                        Document doc = new Document();
            
                                        PdfWriter myWriter = PdfWriter.getInstance(doc, new FileOutputStream(file1+"\\"+file));
                                        doc.open();

                                        doc.add(new Paragraph(code+ " 13 Month Pay"));
                                        doc.add(new Paragraph("The BARR Company",FontFactory.getFont(FontFactory.TIMES_ROMAN,20,Font.BOLD)));
                                        doc.add(new Paragraph("Employee ID:     "+x+""));
                                        doc.add(new Paragraph("Employee Name:   "+b+", "+y+" "+w+"",FontFactory.getFont(FontFactory.TIMES_ROMAN,15,Font.BOLD)));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("Total Day of Work:               "+dw));
                                        doc.add(new Paragraph("Total Month of Work:             "+mw));
                                        doc.add(new Paragraph("Basic Salary:                    "+bs));
                                        doc.add(new Paragraph("Total 13 Month Pay:              "+ttl));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("        Year:"+yr));
                                        doc.add(new Paragraph("Date Process:"+date));
                                        
                                        doc.close();
                                        FileInputStream psStream = null;
                                        try {
                                        psStream = new FileInputStream(file1.getPath()+"\\"+file.getName());
                                        } catch (FileNotFoundException ffne) {ffne.printStackTrace();}
                                        if (psStream == null) {
                                            return;
                                        }
                                        DocFlavor psInFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
                                        Doc myDoc = new SimpleDoc(psStream, psInFormat, null);
                                        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                                        PrintService[] services = PrintServiceLookup.lookupPrintServices(psInFormat, aset);

                                        // this step is necessary because I have several printers configured
                                        PrintService myPrinter = null;
                                        for (int i = 0; i < services.length; i++){
                                            String svcName = services[i].toString();
                                            System.out.println("service found: "+svcName);
                                            if (svcName.contains("printer closest to me")){
                                                myPrinter = services[i];
                                                System.out.println("my printer found: "+svcName);
                                                break;
                                            }
                                        }

                                        if (myPrinter != null) {
                                            DocPrintJob job = myPrinter.createPrintJob();
                                            try {
                                                job.print(myDoc, aset);

                                            } catch (Exception pe) {pe.printStackTrace();}
                                        } else {
                                            System.out.println("no printer services found");
                                        }
                                    }
                                    catch(Exception e){
                                        
                                    }
                                }else{
                                    // <editor-fold defaultstate="collapsed" desc="Create directory for 13th month payslip txt file to all the Employee if the directory is exist">
                                    int p = JOptionPane.showConfirmDialog(null, "The directory "+file1+" doesn't exist."
                                        + "Do you want to create the directory "+file1+"?","Caution",JOptionPane.YES_NO_OPTION);
                                        if(p == 0){
                                            File dir = new File(file1.getPath());
                                            boolean create = dir.mkdirs();
                                            if(create){
                                                try{
                                                    if(file.exists()){
                                                        file.delete();
                                                    }else if(!file.exists()){
                                                        //file.createNewFile();
                                                    }
                                                    //file.createNewFile();
                                                    Document doc = new Document();

                                                    PdfWriter myWriter = PdfWriter.getInstance(doc, new FileOutputStream(file1+"\\"+file));
                                                    doc.open();

                                                    doc.add(new Paragraph(code+ " 13 Month Pay"));
                                                    doc.add(new Paragraph("The BARR Company",FontFactory.getFont(FontFactory.TIMES_ROMAN,20,Font.BOLD)));
                                                    doc.add(new Paragraph("Employee ID:     "+x+""));
                                                    doc.add(new Paragraph("Employee Name:   "+b+", "+y+" "+w+"",FontFactory.getFont(FontFactory.TIMES_ROMAN,15,Font.BOLD)));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("Total Day of Work:               "+dw));
                                                    doc.add(new Paragraph("Total Month of Work:             "+mw));
                                                    doc.add(new Paragraph("Basic Salary:                    "+bs));
                                                    doc.add(new Paragraph("Total 13 Month Pay:              "+ttl));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("        Year:"+yr));
                                                    doc.add(new Paragraph("Date Process:"+date));

                                                    doc.close();
                                                    FileInputStream psStream = null;
                                                    try {
                                                    psStream = new FileInputStream(file1.getPath()+"\\"+file.getName());
                                                    } catch (FileNotFoundException ffne) {ffne.printStackTrace();}
                                                    if (psStream == null) {
                                                        return;
                                                    }
                                                    DocFlavor psInFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
                                                    Doc myDoc = new SimpleDoc(psStream, psInFormat, null);
                                                    PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                                                    PrintService[] services = PrintServiceLookup.lookupPrintServices(psInFormat, aset);

                                                    // this step is necessary because I have several printers configured
                                                    PrintService myPrinter = null;
                                                    for (int i = 0; i < services.length; i++){
                                                        String svcName = services[i].toString();
                                                        System.out.println("service found: "+svcName);
                                                        if (svcName.contains("printer closest to me")){
                                                            myPrinter = services[i];
                                                            System.out.println("my printer found: "+svcName);
                                                            break;
                                                        }
                                                    }

                                                    if (myPrinter != null) {
                                                        DocPrintJob job = myPrinter.createPrintJob();
                                                        try {
                                                            job.print(myDoc, aset);

                                                        } catch (Exception pe) {pe.printStackTrace();}
                                                    } else {
                                                        System.out.println("no printer services found");
                                                    }
                                                }
                                                catch(Exception e){

                                                }
                                            }
                                        }
                                    //</editor-fold>
                                }
                            }
                            catch(Exception e){
                                System.out.println(e);
                            }
                        }while(0 >= x);
                    //</editor-fold>
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
            }
                JOptionPane.showMessageDialog(null, "Success");
                //</editor-fold>
            }
        if(se.isSelected()){
            // <editor-fold defaultstate="collapsed" desc="If Single Employee is Selected">
            int p1 = JOptionPane.showConfirmDialog(null, "Do you want to create the 13th Month Pay Slip for "+empfn.getText()+"?","Choose",JOptionPane.YES_NO_OPTION);
            if(p1 == 0){
                try{
                Calendar cal =new GregorianCalendar();
                int year1;
                year1 = cal.get(Calendar.YEAR);
                        Integer x = Integer.parseInt(empid.getText());
                        String y = empfn.getText();
                        String b = empln.getText();
                        String w = empmn.getText();
                        Integer dw = Integer.parseInt(tdw.getText());
                        Integer mw = Integer.parseInt(tmw.getText());
                        Double bs = Double.parseDouble(basic.getText());
                        Double ttl = Double.parseDouble(total.getText());
                        String yr = year.getText();
                        String date = computeDate.getText();
                        // <editor-fold defaultstate="collapsed" desc="Create 13th month payslip txt file to a single the Employee">
                            try{
                                File file = new File(x+""+y+""+b+"13thMothPaySlip.pdf");
                                File file1 = new File(location.getText()+"\\13thMonthRecords\\13thMonthPay"+year1);
                                boolean exist = file1.exists();
                                if(exist == true){
                                    // <editor-fold defaultstate="collapsed" desc="Create 13th month payslip txt file to all the Employee if the directory is exist">
                                    try{
                                        if(file.exists()){
                                            file.delete();
                                        }else if(!file.exists()){
                                            //file.createNewFile();
                                        }
                                        //file.createNewFile();
                                        Document doc = new Document();
            
                                        PdfWriter myWriter = PdfWriter.getInstance(doc, new FileOutputStream(file1+"\\"+file));
                                        doc.open();

                                        doc.add(new Paragraph(code+ " 13 Month Pay"));
                                        doc.add(new Paragraph("The BARR Company",FontFactory.getFont(FontFactory.TIMES_ROMAN,20,Font.BOLD)));
                                        doc.add(new Paragraph("Employee ID:     "+x+""));
                                        doc.add(new Paragraph("Employee Name:   "+b+", "+y+" "+w+"",FontFactory.getFont(FontFactory.TIMES_ROMAN,15,Font.BOLD)));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("Total Day of Work:               "+dw));
                                        doc.add(new Paragraph("Total Month of Work:             "+mw));
                                        doc.add(new Paragraph("Basic Salary:                    "+bs));
                                        doc.add(new Paragraph("Total 13 Month Pay:              "+ttl));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("    "));
                                        doc.add(new Paragraph("        Year:"+yr));
                                        doc.add(new Paragraph("Date Process:"+date));
                                        
                                        doc.close();
                                        FileInputStream psStream = null;
                                        try {
                                        psStream = new FileInputStream(file1.getPath()+"\\"+file.getName());
                                        } catch (FileNotFoundException ffne) {ffne.printStackTrace();}
                                        if (psStream == null) {
                                            return;
                                        }
                                        DocFlavor psInFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
                                        Doc myDoc = new SimpleDoc(psStream, psInFormat, null);
                                        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                                        PrintService[] services = PrintServiceLookup.lookupPrintServices(psInFormat, aset);

                                        // this step is necessary because I have several printers configured
                                        PrintService myPrinter = null;
                                        for (int i = 0; i < services.length; i++){
                                            String svcName = services[i].toString();
                                            System.out.println("service found: "+svcName);
                                            if (svcName.contains("printer closest to me")){
                                                myPrinter = services[i];
                                                System.out.println("my printer found: "+svcName);
                                                break;
                                            }
                                        }

                                        if (myPrinter != null) {
                                            DocPrintJob job = myPrinter.createPrintJob();
                                            try {
                                                job.print(myDoc, aset);

                                            } catch (Exception pe) {pe.printStackTrace();}
                                        } else {
                                            System.out.println("no printer services found");
                                        }
                                    }
                                    catch(Exception e){
                                        
                                    }
                                    //</editor-fold>
                                }else{
                                    // <editor-fold defaultstate="collapsed" desc="Create directory for 13th month payslip txt file to a single the Employee if the directory is exist">
                                     int p = JOptionPane.showConfirmDialog(null, "The directory "+file1+" doesn't exist."
                                         + "Do you want to create the directory "+file1+"?","Caution",JOptionPane.YES_NO_OPTION);
                                     if(p == 0){
                                        File dir = new File(file1.getPath());
                                        boolean create = dir.mkdirs();
                                        if(create){
                                            try{
                                                    if(file.exists()){
                                                        file.delete();
                                                    }else if(!file.exists()){
                                                        //file.createNewFile();
                                                    }
                                                    //file.createNewFile();
                                                    Document doc = new Document();

                                                    PdfWriter myWriter = PdfWriter.getInstance(doc, new FileOutputStream(file1+"\\"+file));
                                                    doc.open();

                                                    doc.add(new Paragraph(code+ " 13 Month Pay"));
                                                    doc.add(new Paragraph("The BARR Company",FontFactory.getFont(FontFactory.TIMES_ROMAN,20,Font.BOLD)));
                                                    doc.add(new Paragraph("Employee ID:     "+x+""));
                                                    doc.add(new Paragraph("Employee Name:   "+b+", "+y+" "+w+"",FontFactory.getFont(FontFactory.TIMES_ROMAN,15,Font.BOLD)));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("Total Day of Work:               "+dw));
                                                    doc.add(new Paragraph("Total Month of Work:             "+mw));
                                                    doc.add(new Paragraph("Basic Salary:                    "+bs));
                                                    doc.add(new Paragraph("Total 13 Month Pay:              "+ttl));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("    "));
                                                    doc.add(new Paragraph("        Year:"+yr));
                                                    doc.add(new Paragraph("Date Process:"+date));

                                                    doc.close();
                                                    FileInputStream psStream = null;
                                                    try {
                                                    psStream = new FileInputStream(file1.getPath()+"\\"+file.getName());
                                                    } catch (FileNotFoundException ffne) {ffne.printStackTrace();}
                                                    if (psStream == null) {
                                                        return;
                                                    }
                                                    DocFlavor psInFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
                                                    Doc myDoc = new SimpleDoc(psStream, psInFormat, null);
                                                    PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                                                    PrintService[] services = PrintServiceLookup.lookupPrintServices(psInFormat, aset);

                                                    // this step is necessary because I have several printers configured
                                                    PrintService myPrinter = null;
                                                    for (int i = 0; i < services.length; i++){
                                                        String svcName = services[i].toString();
                                                        System.out.println("service found: "+svcName);
                                                        if (svcName.contains("printer closest to me")){
                                                            myPrinter = services[i];
                                                            System.out.println("my printer found: "+svcName);
                                                            break;
                                                        }
                                                    }

                                                    if (myPrinter != null) {
                                                        DocPrintJob job = myPrinter.createPrintJob();
                                                        try {
                                                            job.print(myDoc, aset);

                                                        } catch (Exception pe) {pe.printStackTrace();}
                                                    } else {
                                                        System.out.println("no printer services found");
                                                    }
                                                }
                                                catch(Exception e){

                                                }
                                        }
                                    }
                                    //</editor-fold>
                                }
                                    JOptionPane.showMessageDialog(null, "Success");
                            }
                            catch(Exception e){
                                System.out.println(e);
                            }
                            //</editor-fold>
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
            }
            //</editor-fold>
        }
        //</editor-fold>
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:// <editor-fold defaultstate="collapsed" desc="Browse directory for 13th month payslip txt file ">
        int p1 = JOptionPane.showConfirmDialog(null, "Do you want to browse new directory?","Browse",JOptionPane.YES_NO_OPTION);
        if(p1 == 0){
            location.setText("");
            JFileChooser dialog = new JFileChooser();
            dialog.setCurrentDirectory(new File("."));
            dialog.setDialogTitle("Select Directory");
            dialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            dialog.setAcceptAllFileFilterUsed(false);
            if(dialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
                location.setText(dialog.getSelectedFile()+"");
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_jButton2ActionPerformed

    private void codeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_codeKeyReleased

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        // TODO add your handling code here:
        DefaultTableModel pm = (DefaultTableModel)table.getModel();
        int sr = table.getSelectedRow();
        code.setText(pm.getValueAt(sr , 0).toString());
        empid.setText(pm.getValueAt(sr , 1).toString());
        empln.setText(pm.getValueAt(sr , 2).toString());
        empfn.setText(pm.getValueAt(sr , 3).toString());
        empmn.setText(pm.getValueAt(sr , 4).toString());
        tdw.setText(pm.getValueAt(sr , 5).toString());
        tmw.setText(pm.getValueAt(sr , 6).toString());
        basic.setText(pm.getValueAt(sr , 7).toString());
        total.setText(pm.getValueAt(sr , 8).toString());
        year.setText(pm.getValueAt(sr , 9).toString());
        computeDate.setText(pm.getValueAt(sr ,10).toString());
    }//GEN-LAST:event_tableMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        table();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void comMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2){
        int p1 = JOptionPane.showConfirmDialog(null, "Do you want to Compute 13 Month Pay for all the Employee for this year?","Choose",JOptionPane.YES_NO_OPTION);
            if(p1 == 0){
                try{
                    java.util.Date cd1 = GregorianCalendar.getInstance().getTime();
                    SimpleDateFormat mf1 = new SimpleDateFormat("MM/dd/yyyy");
                    String dt = mf1.format(cd1);
                    
                    java.util.Date cd = GregorianCalendar.getInstance().getTime();
                    SimpleDateFormat mf = new SimpleDateFormat("yyyy");
                    String code = mf.format(cd);
                    String codes = code+"13MNTH";
                    
                    conn = db.db();
                    pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl");
                    rs = pst.executeQuery();
                    while(rs.next()){
                        int x = rs.getInt("emp_id");
                        String y = rs.getString("firstname");
                        String b =rs.getString("lastname");
                        String w =rs.getString("middlename");
                        int b1 = rs.getInt("worked_day");
                        Double g = rs.getDouble("basic_salary");
                        do{
                            if(b1 > 296){
                                while(b1 >= 296){
                                    int v = b1 -= 296;
                                    if(b1 <= 296){
                                        if(b1 >= 1 && b1 <= 25){a1 = 1;}//January*
                                        else if(b1 >= 25 && b1 <= 47){a1 = 2;}//Febuary
                                        else if(b1 >= 47 && b1 <= 73){a1 = 3;}//March*
                                        else if(b1 >= 73 && b1 <= 96){a1 = 4;}//April*
                                        else if(b1 >= 96 && b1 <= 122){a1 = 5;}//May*
                                        else if(b1 >= 122 && b1 <= 145){a1 = 6;}//June*
                                        else if(b1 >= 145 && b1 <= 172){a1 = 7;}//July*
                                        else if(b1 >= 172 && b1 <= 197){a1 = 8;}//August*
                                        else if(b1 >= 197 && b1 <= 222){a1 = 9;}//September*
                                        else if(b1 >= 222 && b1 <= 249){a1 = 10;}//October*
                                        else if(b1 >= 249 && b1 <= 274){a1 = 11;}//November*+
                                        else if(b1 >= 274 && b1 <=296){a1 = 12;}//December*
                                         a = a1;
                                        k = (g * a)/ 12;
                                    }
                                }
                            }else{
                                if(b1 >= 1 && b1 <= 25){a1 = 1;}//January*
                                else if(b1 >= 25 && b1 <= 47){a1 = 2;}//Febuary
                                else if(b1 >= 47 && b1 <= 73){a1 = 3;}//March*
                                else if(b1 >= 73 && b1 <= 96){a1 = 4;}//April*
                                else if(b1 >= 96 && b1 <= 122){a1 = 5;}//May*
                                else if(b1 >= 122 && b1 <= 145){a1 = 6;}//June*
                                else if(b1 >= 145 && b1 <= 172){a1 = 7;}//July*
                                else if(b1 >= 172 && b1 <= 197){a1 = 8;}//August*
                                else if(b1 >= 197 && b1 <= 222){a1 = 9;}//September*
                                else if(b1 >= 222 && b1 <= 249){a1 = 10;}//October*
                                else if(b1 >= 249 && b1 <= 274){a1 = 11;}//November*+
                                else if(b1 >= 274 && b1 <=296){a1 = 12;}//December*
                                a = a1;
                                k = (g * a)/ 12;
                            }
                            try{
                                conn = db.db();
                                pst =conn.prepareStatement("insert into payroll_schema.month_tbl values (?,?,?,?,?,?,?,?,?,?,?);");
                                pst.setString(1,codes);
                                pst.setString(2,String.valueOf(x));
                                pst.setString(3,y);
                                pst.setString(4,b);
                                pst.setString(5,w);
                                pst.setString(6,String.valueOf(b1));
                                pst.setString(7,String.valueOf(a));
                                pst.setString(8,String.valueOf(g));
                                pst.setString(9,String.valueOf(k));
                                pst.setString(10,code);
                                pst.setString(11,dt);
                                pst.execute();
                            }
                            catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                        }while(0 >= x);
                    }
                }
                catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                
                date();
                table();
            }
        }
    }//GEN-LAST:event_comMouseClicked

    private void comActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_comActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(thirteenmonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(thirteenmonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(thirteenmonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(thirteenmonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                thirteenmonth dialog = new thirteenmonth(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ae;
    private javax.swing.JTextField basic;
    private javax.swing.JTextField code;
    private javax.swing.JButton com;
    private javax.swing.JTextField computeDate;
    private javax.swing.JTextField empfn;
    private javax.swing.JTextField empid;
    private javax.swing.JTextField empln;
    private javax.swing.JTextField empmn;
    private javax.swing.JPanel emppanel;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField location;
    private javax.swing.JRadioButton se;
    private javax.swing.JTextField searchCode;
    private javax.swing.JTable table;
    private javax.swing.JTextField tdw;
    private javax.swing.JTextField tmw;
    private javax.swing.JTextField total;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables
public String getValue(String title){
    String value = "";
        try{
            prop.load(new FileInputStream("config.properties"));
            value = prop.getProperty(title);
        }
        catch(Exception e){JOptionPane.showMessageDialog(null, "2");}
        return value;
}
}
