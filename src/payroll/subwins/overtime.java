/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package payroll.subwins;

import com.placeholder.PlaceHolder;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import payroll.main.db;
import payroll.secSubWins.*;
/**
 *
 * @author ASUS
 */
public class overtime extends javax.swing.JDialog {
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    PlaceHolder ph;
    int state;
    double rate;
    String ids, lastname, firstname, date_in,time_in, date_out, time_out, status, a;
    /**
     * Creates new form overtime
     */
    public overtime(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        ph = new PlaceHolder(srid, "ID");
        ph = new PlaceHolder(srln, "Last Name");
        ph = new PlaceHolder(srfn, "First Name");
        table();
    }
    
    public void table(){
        try{
            conn = db.db();
            pst = conn.prepareStatement("SELECT * FROM payroll_schema.overtime_tbl order by ot_date desc");
            rs = pst.executeQuery();
            rectable.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }   public void ratePerHour(){
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        id = new javax.swing.JTextField();
        fn = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        ln = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        otti = new javax.swing.JTextField();
        dt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        twh = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        otto = new javax.swing.JTextField();
        st = new javax.swing.JComboBox<>();
        recorded = new javax.swing.JRadioButton();
        notyetrecorded = new javax.swing.JRadioButton();
        valid = new javax.swing.JRadioButton();
        invalid = new javax.swing.JRadioButton();
        jLabel23 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rectable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        srid = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        srln = new javax.swing.JTextField();
        srfn = new javax.swing.JTextField();
        OTrefresh = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        edit = new javax.swing.JButton();
        save1 = new javax.swing.JButton();
        cancel1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Over Time");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Over Time Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        id.setEditable(false);
        id.setBackground(new java.awt.Color(255, 255, 255));
        id.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        id.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        fn.setEditable(false);
        fn.setBackground(new java.awt.Color(255, 255, 255));

        jLabel26.setText("First Name:");

        jLabel25.setText("Last Name:");

        ln.setEditable(false);
        ln.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setText("Date");

        jLabel12.setText("Time In");

        otti.setEditable(false);
        otti.setBackground(new java.awt.Color(255, 255, 255));
        otti.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        dt.setEditable(false);
        dt.setBackground(new java.awt.Color(255, 255, 255));
        dt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setText("ID:");

        jLabel13.setText("Time Of Work");

        twh.setEditable(false);
        twh.setBackground(new java.awt.Color(255, 255, 255));
        twh.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel14.setText("to");

        jLabel2.setText("Type of Over Time");

        jLabel15.setText("Time out");

        otto.setEditable(false);
        otto.setBackground(new java.awt.Color(255, 255, 255));
        otto.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        st.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Regular OT", "Rest Day OT", "Holiday OT", "Holiday Rest Day OT" }));
        st.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        st.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                stItemStateChanged(evt);
            }
        });

        recorded.setBackground(new java.awt.Color(255, 255, 255));
        recorded.setText("Recorded");
        recorded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordedActionPerformed(evt);
            }
        });

        notyetrecorded.setBackground(new java.awt.Color(255, 255, 255));
        notyetrecorded.setText("Not yet recorded");
        notyetrecorded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notyetrecordedActionPerformed(evt);
            }
        });

        valid.setBackground(new java.awt.Color(255, 255, 255));
        valid.setText("Valid");
        valid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validActionPerformed(evt);
            }
        });

        invalid.setBackground(new java.awt.Color(255, 255, 255));
        invalid.setText("Invalid");
        invalid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invalidActionPerformed(evt);
            }
        });

        jLabel23.setText("Total");

        total.setEditable(false);
        total.setBackground(new java.awt.Color(255, 255, 255));
        total.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otto, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(twh, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(st, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel25)
                                            .addComponent(jLabel26))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ln)
                                            .addComponent(fn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dt)))
                        .addGap(84, 84, 84))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(recorded)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(notyetrecorded)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invalid)
                    .addComponent(valid))
                .addGap(73, 73, 73))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(ln, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(dt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(otti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(otto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(twh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(st, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recorded)
                    .addComponent(valid))
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notyetrecorded)
                    .addComponent(invalid))
                .addGap(16, 16, 16))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Over Time Record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        rectable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Date", "Log in", "Log Out", "Type of OT", "Status"
            }
        ));
        rectable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        rectable.setAutoscrolls(false);
        rectable.setShowHorizontalLines(false);
        rectable.setShowVerticalLines(false);
        rectable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rectableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(rectable);

        jLabel4.setText("Search by ID:");

        srid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        srid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sridKeyReleased(evt);
            }
        });

        jLabel35.setText("Search by Name:");

        srln.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        srln.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srlnKeyReleased(evt);
            }
        });

        srfn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        srfn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srfnKeyReleased(evt);
            }
        });

        OTrefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/images/refresh_update.png"))); // NOI18N
        OTrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OTrefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel35)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(srid, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(OTrefresh))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(srln, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(srfn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(srid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(OTrefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srln, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(srfn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(59, 89, 152));

        edit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        save1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        save1.setText("Save");
        save1.setEnabled(false);
        save1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save1ActionPerformed(evt);
            }
        });

        cancel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancel1.setText("Cancel");
        cancel1.setEnabled(false);
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(save1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cancel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(save1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 54, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rectableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rectableMouseReleased
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of Employee's Overtime by Clicking the Table">
        DefaultTableModel pm = (DefaultTableModel)rectable.getModel();
        int sr = rectable.getSelectedRow();
        
        id.setText(pm.getValueAt(sr, 0).toString());
        ln.setText(pm.getValueAt(sr, 1).toString());
        fn.setText(pm.getValueAt(sr, 2).toString());
        dt.setText(pm.getValueAt(sr, 7).toString());
        otti.setText(pm.getValueAt(sr, 5).toString());
        otto.setText(pm.getValueAt(sr, 6).toString());
        twh.setText(pm.getValueAt(sr, 3).toString());
        String type = pm.getValueAt(sr, 4).toString();
        if(type.equals("No Validation")){
            
        }else if(!type.equals("No Validation")){
            st.setSelectedItem(pm.getValueAt(sr, 4).toString());
        }
        String b = pm.getValueAt(sr, 8).toString();
        if(b.equals("Recorded")){
            recorded.setSelected(true);
            notyetrecorded.setSelected(false);
        }else if(b.equals("Not Yet Recorded")){
            notyetrecorded.setSelected(true);
            recorded.setSelected(false);
        }
        String validation = pm.getValueAt(sr, 9).toString();
        switch (validation) {
            case "Valid":
                valid.setSelected(true);
                invalid.setSelected(false);
                break;
        //</editor-fold>
            case "Invalid":
                invalid.setSelected(true);
                valid.setSelected(false);
                break;
            case "No Validation":
                invalid.setSelected(false);
                valid.setSelected(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_rectableMouseReleased

    private void sridKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sridKeyReleased
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of Employee's Overtime by Typing the ID">
        if(!(evt.getKeyChar() == KeyEvent.VK_ENTER)){
        if(srid.getText().equals("")){
            id.setText("");
            ln.setText("");
            fn.setText("");
            dt.setText("");
            otti.setText("");
            otto.setText("");
            twh.setText("");
            st.setSelectedIndex(0);
            table();
        }else{
            try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.overtime_tbl WHERE id like'%"+srid.getText()+"%' order by ot_date desc;");
                
                rs = pst.executeQuery();
                rectable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        }
        //</editor-fold>
    }//GEN-LAST:event_sridKeyReleased

    private void srlnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srlnKeyReleased
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of Employee's Overtime by Typing the Last Name">
        if(!(evt.getKeyChar() == KeyEvent.VK_ENTER)){
        if(srln.getText().equals("")){
            id.setText("");
            ln.setText("");
            fn.setText("");
            dt.setText("");
            otti.setText("");
            otto.setText("");
            twh.setText("");
            st.setSelectedIndex(0);
            table();
        }else{
            try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.overtime_tbl WHERE lastname like'%"+srln.getText()+"%' order by ot_date desc;");
               
                rs = pst.executeQuery();
                rectable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        }
        //</editor-fold>
    }//GEN-LAST:event_srlnKeyReleased

    private void srfnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srfnKeyReleased
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of Employee's Overtime by Typing the First Name">
        if(!(evt.getKeyChar() == KeyEvent.VK_ENTER)){
        if(srfn.getText().equals("")){
            id.setText("");
            ln.setText("");
            fn.setText("");
            dt.setText("");
            otti.setText("");
            otto.setText("");
            twh.setText("");
            st.setSelectedIndex(0);
            table();
        }else{
            try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.overtime_tbl WHERE firstname like'%"+srfn.getText()+"%' order by ot_date desc;");
                
                rs = pst.executeQuery();
                rectable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        }
        //</editor-fold>
    }//GEN-LAST:event_srfnKeyReleased

    private void OTrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OTrefreshActionPerformed
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Refresh Details of Employee's Overtime">
            id.setText("");
            ln.setText("");
            fn.setText("");
            dt.setText("");
            otti.setText("");
            otto.setText("");
            twh.setText("");
            st.setSelectedIndex(0);
            total.setText("");
            recorded.setSelected(false);
            notyetrecorded.setSelected(false);
            valid.setSelected(false);
            invalid.setSelected(false);
            ph = new PlaceHolder(srid, "ID");
            ph = new PlaceHolder(srln, "Last Name");
            ph = new PlaceHolder(srfn, "First Name");
           table();
        //</editor-fold>
    }//GEN-LAST:event_OTrefreshActionPerformed

    private void stItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_stItemStateChanged
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Compute Details of Employee's Overtime">
        
        try{
            conn = db.db();
            pst = conn.prepareStatement("select * from payroll_schema.emp_tbl where emp_id = ? and lastname = ? and firstname = ? ;");
            pst.setString(1, id.getText());
            pst.setString(2, ln.getText());
            pst.setString(3, fn.getText());
            rs = pst.executeQuery();

            while(rs.next()){
                double trph = Double.parseDouble(rs.getString("hourly_rate"));
                
                
                //JOptionPane.showMessageDialog(null, sal+"/"+days+"/"+hour+"="+trph);
                if(st.getSelectedItem().toString().equals("Select")){
                    rate = 0.0;
                    total.setText("");
                }
                if(st.getSelectedItem().toString().equals("Regular OT")){
                    rate = 1.25;
                    Integer t = Integer.parseInt(twh.getText())-8;
                    Double tr = trph;
                    double to1 = t*tr*rate;
                    total.setText(to1+"");
                }
                if(st.getSelectedItem().toString().equals("Rest Day OT")){
                    rate = 1.3;
                    Integer t = Integer.parseInt(twh.getText())-8;
                    Double tr = trph;
                    double to1 = t*tr*rate;
                    total.setText( to1+"");
                }
                if(st.getSelectedItem().toString().equals("Holiday OT")){
                    rate = 2.0;
                    Integer t = Integer.parseInt(twh.getText())-8;
                    Double tr = trph;
                    double to1 = t*tr*rate;
                    total.setText(to1+"");
                }
                if(st.getSelectedItem().toString().equals("Holiday Rest Day OT")){
                    rate=2.5;
                    Integer t = Integer.parseInt(twh.getText())-8;
                    Double tr = trph;
                    double to1 = t*tr*rate;
                    total.setText(to1+"");
                }
                
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        
        //</editor-fold>
    }//GEN-LAST:event_stItemStateChanged

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
        if(id.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please select an overtime record to update");
        }else{
            int p = JOptionPane.showConfirmDialog(null, "Do you want to update a overtime record?","Update Record",JOptionPane.YES_NO_OPTION);
            if(p == 0){
                state = 2;
                id.setEditable(true);
                ln.setEditable(true);
                fn.setEditable(true);
                dt.setEditable(true);
                otti.setEditable(true);
                otto.setEditable(true);
                twh.setEditable(true);
                total.setEditable(true);
                edit.setEnabled(false);
                save1.setEnabled(true);
                cancel1.setEnabled(true);
                
                rectable.setEnabled(false);
                srid.setEditable(false);
                srfn.setEditable(false);
                srln.setEditable(false);
                OTrefresh.setEnabled(false);

                srid.setText("");
                srfn.setText("");
                srln.setText("");
                ph = new PlaceHolder(srid, "ID");
                ph = new PlaceHolder(srln, "Last Name");
                ph = new PlaceHolder(srfn, "First Name");
            }
        }
    }//GEN-LAST:event_editActionPerformed

    private void save1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save1ActionPerformed
        // TODO add your handling code here:
        if(state == 2){
            int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to update the detail of this account?","Update Record",JOptionPane.YES_NO_OPTION);
            if(p == 0){
                if(id.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The id is empty");
                }
                if(fn.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The first name is empty");
                }
                if(ln.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The last name is empty");
                }
                if(total.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The total is empty");
                }
                if(st.getSelectedItem().toString().equals("Select")){
                    JOptionPane.showMessageDialog(null,"The overtime type is not selected");
                }
                if(!id.getText().equals("") && !fn.getText().equals("") && !ln.getText().equals("") && !st.getSelectedItem().toString().equals("Select") && !total.getText().equals("")){
                    
                    
                if(recorded.isSelected()){
                
                    java.util.Date cd = GregorianCalendar.getInstance().getTime();
                    SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                    String dtm = mf.format(cd);
                    String mnth = dtm.substring(0, 2);
                    String yr = dtm.substring(2,6);
                    Integer m = Integer.parseInt(mnth);
                    Integer y = Integer.parseInt(yr);
                    
                try{
                    
                    conn = db.db();
                    pst = conn.prepareStatement("UPDATE payroll_schema.overtime_tbl SET status = 'Recorded' , ot_type = ?, twh = ?, validation = '"+a+"' where id = ? and lastname = ? and  firstname = ? and ot_date = ? and ot_login = ? and ot_logout = ?; ");
                    
                    
                    pst.setString(1,st.getSelectedItem().toString());
                    pst.setString(2,twh.getText());
                    
                    pst.setString(6,dt.getText());
                    
                    pst.setString(7,otti.getText());
                    pst.setString(8,otto.getText());
                    
                    
                    pst.setString(3,id.getText());
                    pst.setString(5,fn.getText());
                    pst.setString(4,ln.getText());
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "Recorded");

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                
                
                
                if(st.getSelectedItem().toString().equals("Regular OT")){
                    try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_reg"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a + s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_reg = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "1");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "2");
                        }
                    }
                    if(st.getSelectedItem().toString().equals("Rest Day OT")){
                        try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_rd"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a + s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_rd = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "3");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "4");
                        }
                    }
                    if(st.getSelectedItem().toString().equals("Holiday OT")){
                        try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_hd"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a + s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_hd = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "5");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "6");
                        }
                    }
                    if(st.getSelectedItem().toString().equals("Holiday Rest Day OT")){
                        try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_hdrd"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a + s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_hdrd = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "7");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "7");
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Success");
                
                
                
            }else if(notyetrecorded.isSelected()){
                    java.util.Date cd = GregorianCalendar.getInstance().getTime();
                    SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                    String dtm = mf.format(cd);
                    String mnth = dtm.substring(0, 2);
                    String yr = dtm.substring(2,6);
                    Integer m = Integer.parseInt(mnth);
                    Integer y = Integer.parseInt(yr);
                try{
                    conn = db.db();
                    pst = conn.prepareStatement("UPDATE payroll_schema.overtime_tbl SET status = 'Not Yet Recorded' , ot_type = ?, twh = ?, validation = '"+a+"' where id = ? and lastname = ? and  firstname = ? and ot_date = ? and ot_login = ? and ot_logout = ?; ");
                    pst.setString(1,st.getSelectedItem().toString());
                    pst.setString(2,twh.getText());
                    
                    pst.setString(6,dt.getText());
                    
                    pst.setString(7,otti.getText());
                    pst.setString(8,otto.getText());
                    
                    
                    pst.setString(3,id.getText());
                    pst.setString(5,fn.getText());
                    pst.setString(4,ln.getText());
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "Recorded can add to payroll later");
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                
                
                
                if(st.getSelectedItem().toString().equals("Regular OT")){
                    try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_hdrd"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a - s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_hdrd = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "7");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "7");
                        }
                    }
                    if(st.getSelectedItem().toString().equals("Rest Day OT")){
                        try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_rd"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a - s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_rd = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "3");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "4");
                        }
                    }
                    if(st.getSelectedItem().toString().equals("Holiday OT")){
                        try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_hd"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a - s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_hd = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "5");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "6");
                        }
                    }
                    if(st.getSelectedItem().toString().equals("Holiday Rest Day OT")){
                        try{
                            conn = db.db();
                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                        pst.setString(1, id.getText());
                        pst.setString(2, m+""+y+"PYRLL");
                        rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("overtime_hdrd"));
                                Double s = Double.parseDouble(total.getText());
                                double b = a - s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET overtime_hdrd = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, id.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, "7");
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, "7");
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Success");
                    
                    
                    table();
                    id.setEditable(false);
                    ln.setEditable(false);
                    fn.setEditable(false);
                    dt.setEditable(false);
                    otti.setEditable(false);
                    otto.setEditable(false);
                    twh.setEditable(false);
                    total.setEditable(false);
                    edit.setEnabled(true);
                    save1.setEnabled(false);
                    cancel1.setEnabled(false);
                    rectable.setEnabled(true);
                    srid.setEditable(true);
                    srfn.setEditable(true);
                    srln.setEditable(true);
                    OTrefresh.setEnabled(true);

                    srid.setText("");
                    srfn.setText("");
                    srln.setText("");
                    ph = new PlaceHolder(srid, "ID");
                    ph = new PlaceHolder(srln, "Last Name");
                    ph = new PlaceHolder(srfn, "First Name");
                }
            }
        }
        }
    }//GEN-LAST:event_save1ActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        // TODO add your handling code here:
        int p = JOptionPane.showConfirmDialog(null, "Do you want to cancel?","Add Record",JOptionPane.YES_NO_OPTION);
        if(p == 0){
            id.setEditable(false);
            ln.setEditable(false);
            fn.setEditable(false);
            dt.setEditable(false);
            otti.setEditable(false);
            otto.setEditable(false);
            twh.setEditable(false);
            total.setEditable(false);
            edit.setEnabled(true);
            save1.setEnabled(false);
            cancel1.setEnabled(false);
            rectable.setEnabled(true);
            srid.setEditable(true);
            srfn.setEditable(true);
            srln.setEditable(true);
            OTrefresh.setEnabled(true);
            
            srid.setText("");
            srfn.setText("");
            srln.setText("");
            ph = new PlaceHolder(srid, "ID");
            ph = new PlaceHolder(srln, "Last Name");
            ph = new PlaceHolder(srfn, "First Name");

        }
    }//GEN-LAST:event_cancel1ActionPerformed

    private void recordedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordedActionPerformed
        // TODO add your handling code here:
        recorded.setSelected(true);
        notyetrecorded.setSelected(false);
        
    }//GEN-LAST:event_recordedActionPerformed

    private void notyetrecordedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notyetrecordedActionPerformed
        // TODO add your handling code here:
        recorded.setSelected(false);
        notyetrecorded.setSelected(true);
        
    }//GEN-LAST:event_notyetrecordedActionPerformed

    private void validActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validActionPerformed
        // TODO add your handling code here:
        valid.setSelected(true);
        invalid.setSelected(false);
        a = "Valid";
        
    }//GEN-LAST:event_validActionPerformed

    private void invalidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invalidActionPerformed
        // TODO add your handling code here:
        valid.setSelected(false);
        invalid.setSelected(true);
        a = "Invalid";
    }//GEN-LAST:event_invalidActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(overtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(overtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(overtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(overtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                overtime dialog = new overtime(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OTrefresh;
    private javax.swing.JButton cancel1;
    private javax.swing.JTextField dt;
    private javax.swing.JButton edit;
    private javax.swing.JTextField fn;
    private javax.swing.JTextField id;
    private javax.swing.JRadioButton invalid;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField ln;
    private javax.swing.JRadioButton notyetrecorded;
    private javax.swing.JTextField otti;
    private javax.swing.JTextField otto;
    private javax.swing.JRadioButton recorded;
    private javax.swing.JTable rectable;
    private javax.swing.JButton save1;
    private javax.swing.JTextField srfn;
    private javax.swing.JTextField srid;
    private javax.swing.JTextField srln;
    private javax.swing.JComboBox<String> st;
    private javax.swing.JTextField total;
    private javax.swing.JTextField twh;
    private javax.swing.JRadioButton valid;
    // End of variables declaration//GEN-END:variables
}
