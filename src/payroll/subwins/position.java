/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package payroll.subwins;

import java.io.FileInputStream;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import payroll.main.db;
import payroll.secSubWins.*;
/**
 *
 * @author ASUS
 */
public class position extends javax.swing.JDialog {
    Connection conn, conn1, conn2, conn3, conn4;
    PreparedStatement pst, pst1, pst2, pst3, pst4;
    ResultSet rs, rs1, rs2, rs3, rs4;
    Double deduc1 = 0.0;
    Double deduc2 = 0.0;
    Double deduc3 = 0.0;
    Double deduc4 = 0.0;
    double rate, excess, basicex;
    Properties prop = new Properties();
    Double philhealthrate;
    int state;
    double day;
    
    /**
     * Creates new form position
     */
    public position(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        table();
        save1.setEnabled(false);
        cancel1.setEnabled(false);
        day = Double.parseDouble(getValue("days"));
    }
    private void table(){
        // <editor-fold defaultstate="collapsed" desc="Display Details in the Table">
            try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.position_tbl;");
                rs = pst.executeQuery();
                positiontable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
            try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.position_tbl;");
                rs = pst.executeQuery();
                
                while(rs.next()){
                    po3.addItem(rs.getString(1));
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
            //</editor-fold>
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        bs2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        sr1 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        noe = new javax.swing.JTextField();
        po2 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        positiontable = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        refreshpo = new javax.swing.JButton();
        po3 = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        newemp1 = new javax.swing.JButton();
        editemp1 = new javax.swing.JButton();
        cancel1 = new javax.swing.JButton();
        save1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Position");

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Job Position Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel10.setText("Position:");

        jLabel11.setText("Basic Salary:");

        bs2.setEditable(false);
        bs2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bs2KeyReleased(evt);
            }
        });

        jLabel12.setText("Hourly Rate:");

        sr1.setEditable(false);

        jLabel17.setText("No. of Employee");

        noe.setEditable(false);

        po2.setEditable(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(po2))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel17)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sr1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(noe, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 106, Short.MAX_VALUE))
                            .addComponent(bs2))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(po2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(bs2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(noe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Position List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        positiontable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Position", "Basic Salary", "Salary Rate", "No. of Employee"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        positiontable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        positiontable.setShowHorizontalLines(false);
        positiontable.setShowVerticalLines(false);
        positiontable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                positiontableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(positiontable);

        jLabel20.setText("Search Position:");

        refreshpo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/images/refresh_update.png"))); // NOI18N
        refreshpo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshpoActionPerformed(evt);
            }
        });

        po3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        po3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                po3ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(po3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshpo))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(refreshpo)
                    .addComponent(po3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel9.setBackground(new java.awt.Color(59, 89, 152));

        newemp1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newemp1.setText("New");
        newemp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newemp1ActionPerformed(evt);
            }
        });

        editemp1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editemp1.setText("Edit");
        editemp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editemp1ActionPerformed(evt);
            }
        });

        cancel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancel1.setText("Cancel");
        cancel1.setEnabled(false);
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        save1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        save1.setText("Save");
        save1.setEnabled(false);
        save1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newemp1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editemp1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(save1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(newemp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editemp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(save1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void positiontableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_positiontableMouseReleased
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of Position by Clicking the Table">
        DefaultTableModel pm = (DefaultTableModel)positiontable.getModel();
        int sr = positiontable.getSelectedRow();
        
        po2.setText(pm.getValueAt(sr, 0).toString());
        bs2.setText(pm.getValueAt(sr, 1).toString());
        sr1.setText(pm.getValueAt(sr, 2).toString());
        noe.setText(pm.getValueAt(sr, 3).toString());
        //</editor-fold>
    }//GEN-LAST:event_positiontableMouseReleased

    private void refreshpoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshpoActionPerformed
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Refresh Details of Position">
        po3.setSelectedIndex(0);
        po2.setText("");
        bs2.setText("");
        sr1.setText("");
        noe.setText("");
        try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.position_tbl;");
                rs = pst.executeQuery();
                positiontable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
        //</editor-fold>
    }//GEN-LAST:event_refreshpoActionPerformed

    private void po3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_po3ItemStateChanged
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Display Details of Position by Choosing">
        if(po3.getSelectedItem().toString().equals("Select")){
            po2.setText("");
            bs2.setText("");
            sr1.setText("");
            noe.setText("");
        }else{
            try{
                conn = db.db();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.position_tbl WHERE position = ?;");
                pst.setString(1, po3.getSelectedItem().toString());
                rs = pst.executeQuery();
                positiontable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_po3ItemStateChanged

    private void newemp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newemp1ActionPerformed
        // TODO add your handling code here:
        int p = JOptionPane.showConfirmDialog(null, "Do you want to add a position?","Add Record",JOptionPane.YES_NO_OPTION);
        if(p == 0){
            state = 1;
            po2.setEditable(true);
            bs2.setEditable(true);
            sr1.setEditable(true);
            noe.setEditable(true);
            po2.setText("");
            bs2.setText("");
            sr1.setText("");
            noe.setText("");
            positiontable.setEnabled(false);
            po3.setEnabled(false);
            refreshpo.setEnabled(false);
            save1.setEnabled(true);
            cancel1.setEnabled(true);
            newemp1.setEnabled(false);
            editemp1.setEnabled(false);
        }
    }//GEN-LAST:event_newemp1ActionPerformed

    private void editemp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editemp1ActionPerformed
        // TODO add your handling code here:
        if(po2.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please select position to update");
        }else{
            int p = JOptionPane.showConfirmDialog(null, "Do you want to update a position?","Update Record",JOptionPane.YES_NO_OPTION);
            if(p == 0){
                state =2;
                po2.setEditable(true);
                bs2.setEditable(true);
                sr1.setEditable(true);
                noe.setEditable(true);
                positiontable.setEnabled(false);
                po3.setEnabled(false);
                refreshpo.setEnabled(false);
                save1.setEnabled(true);
                cancel1.setEnabled(true);
                newemp1.setEnabled(false);
                editemp1.setEnabled(false);
            }
        }
    }//GEN-LAST:event_editemp1ActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        // TODO add your handling code here:
        int p = JOptionPane.showConfirmDialog(null, "Do you want to cancel?","Caution",JOptionPane.YES_NO_OPTION);
        if(p == 0){
            po2.setEditable(false);
            bs2.setEditable(false);
            sr1.setEditable(false);
            noe.setEditable(false);
            positiontable.setEnabled(true);
            po3.setEnabled(true);
            refreshpo.setEnabled(true);
            save1.setEnabled(false);
            cancel1.setEnabled(false);
            newemp1.setEnabled(true);
            editemp1.setEnabled(true);
            po2.setText("");
            bs2.setText("");
            sr1.setText("");
            noe.setText("");
        }
    }//GEN-LAST:event_cancel1ActionPerformed

    private void save1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save1ActionPerformed
        // TODO add your handling code here:
        if(state == 1){
            int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to add this position?","Add Record",JOptionPane.YES_NO_OPTION);
            if(p == 0){
                if(po2.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The position is empty");
                } 
                if(bs2.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The basic salary is empty");
                }
                if(sr1.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The salary rate is empty");
                }
                if(!po2.getText().equals("") && !bs2.getText().equals("") && !sr1.getText().equals("")){
                try{
                    conn = db.db();
                    pst = conn.prepareStatement("INSERT INTO payroll_schema.position_tbl "
                        + "VALUES (?,?,?,?);");

                    pst.setString(1, po2.getText());
                    pst.setString(2, bs2.getText());
                    pst.setString(3, sr1.getText());
                    pst.setString(4, noe.getText());

                    pst.execute();

                    JOptionPane.showMessageDialog(null,"Position is added successfully");
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
                po3.addItem(po2.getText());
                employee.po.addItem(po2.getText());
                
                table();
                po2.setEditable(false);
                bs2.setEditable(false);
                sr1.setEditable(false);
                noe.setEditable(false);
                positiontable.setEnabled(true);
                po3.setEnabled(true);
                refreshpo.setEnabled(true);
                save1.setEnabled(false);
                cancel1.setEnabled(false);
                newemp1.setEnabled(true);
                editemp1.setEnabled(true);
                }
            }
        }else if(state == 2){
            int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to update the detail of this position?","Update Record",JOptionPane.YES_NO_OPTION);
            if(p == 0){
                if(po2.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The position is empty");
                } 
                if(bs2.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The basic salary is empty");
                }
                if(sr1.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"The salary rate is empty");
                }
                if(!po2.getText().equals("") && !bs2.getText().equals("") && !sr1.getText().equals("")){
               try{
                    conn = db.db();
                    pst = conn.prepareStatement("UPDATE payroll_schema.position_tbl SET "
                        + "basic_salary = "+ bs2.getText()+", hourly_rate = "+ sr1.getText()+","
                            + " no_of_emp = "+noe.getText()+" WHERE position = '"+po2.getText()+"';");

                    pst.execute();

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
               try{
                    conn = db.db();
                    pst = conn.prepareStatement("UPDATE payroll_schema.emp_tbl SET "
                        + "basic_salary = "+ bs2.getText()+", hourly_rate = "+ sr1.getText()+" WHERE position = '"+po2.getText()+"';");

                    pst.execute();

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
               java.util.Date gre = GregorianCalendar.getInstance().getTime();
                SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                String dt = mf.format(gre);
                String mnth = dt.substring(0, 2);
                String yr = dt.substring(2,6);
                Integer s = Integer.parseInt(mnth);
                Integer y = Integer.parseInt(yr);
                String code  = s+""+y+"PYRLL";
                
                
                double givenValue = Double.parseDouble(bs2.getText());
            
            //for pagibig computation
            try{
                conn1 = db.db();
                pst1 = conn1.prepareStatement("Select * From payroll_schema.subpagibig_tbl");
                rs1 = pst1.executeQuery();
                while(rs1.next()){
                    if(givenValue >= rs1.getDouble("pagibig_min") && givenValue <= rs1.getDouble("pagibig_max")){
                        double pgrate = rs1.getInt("ee_rate");
                        deduc1 = (givenValue * pgrate)/100;
                        //JOptionPane.showMessageDialog(null, deduc1);
                    }else if(!(givenValue >= rs1.getDouble("pagibig_min") && givenValue <= rs1.getDouble("pagibig_max")) && givenValue >= 5000.00){
                        deduc1 = 100.00;
                    }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
            
            // for the philhealth computation
            try{
                conn2 = db.db();
                pst2 = conn2.prepareStatement("Select * From payroll_schema.subphilhealth_tbl");
                rs2 = pst2.executeQuery();
                while(rs2.next()){
                    if(givenValue >= rs2.getDouble("philhealth_min") && givenValue <= rs2.getDouble("philhealth_max")){
                        
                        if(givenValue >= 10000.01 && givenValue <= 39999.99){
                            deduc2 = (givenValue * philhealthrate)/100;
                        }else{
                            deduc2 = rs2.getDouble("ee");
                        }
                        //JOptionPane.showMessageDialog(null, deduc2);
                    }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
            //for the sss computation 
           try{
                conn3 = db.db();
                pst3 = conn3.prepareStatement("Select * From payroll_schema.subsss_tbl");
                rs3 = pst3.executeQuery();
                while(rs3.next()){
                    if(givenValue >= rs3.getDouble("sss_min") && givenValue <= rs3.getDouble("sss_max")){
                        deduc3 = rs3.getDouble("ee");
                        //JOptionPane.showMessageDialog(null, deduc3);
                    }else if(givenValue < 1000.00){
                        deduc3 = 0.00;
                    }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
            try{
                    conn4 = db.db();
                    pst4 = conn4.prepareStatement("Select * From payroll_schema.subtax_tbl;");
                    rs4 = pst4.executeQuery();
                    while(rs4.next()){
                        if(givenValue >= rs4.getDouble("tax_min") && givenValue <= rs4.getDouble("tax_max")){
                            basicex = rs4.getDouble("tax_base");
                            //JOptionPane.showMessageDialog(null, basicex+"puta");
                            rate = rs4.getDouble("tax_rate");
                            //JOptionPane.showMessageDialog(null, rate+"ina");
                            excess = rs4.getDouble("tax_excess");
                            //JOptionPane.showMessageDialog(null, excess+"mo");
                            double totala = givenValue - (deduc2 + deduc1 + deduc3);
                            //JOptionPane.showMessageDialog(null, totala+"1");
                            double totalb = totala - basicex;
                            //JOptionPane.showMessageDialog(null, totalb+"2");
                            double totalc = (totalb * rate)/100;
                            //JOptionPane.showMessageDialog(null, totalc+"3");
                            double total = totalc + excess;
                            //JOptionPane.showMessageDialog(null, total+"4");
                            
                            deduc4 = total;
                        }
                    }
                }
                catch(Exception r){JOptionPane.showMessageDialog(null, r);}
                
                
               try{
                    conn = db.db();
                    pst = conn.prepareStatement("SELECT * FROM  payroll_schema.emp_tbl  WHERE position = '"+po2.getText()+"';");
                    
                    rs = pst.executeQuery();
                    while(rs.next()){
                        String l = rs.getString("lastname");
                        String f = rs.getString("firstname");
                        String m = rs.getString("middlename");
                        String id = rs.getString("emp_id");
                        try{
                               conn = db.db();
                               pst = conn.prepareStatement("update payroll_schema.payroll_tbl set "
                                    + "hourly_rate = "+sr1.getText()+" , "
                                    + "basic_salary = "+bs2.getText()+", "
                                    + "sss_deduc = "+deduc3+", "
                                    + "philhealth_deduc = "+deduc2+", "
                                    + "pagibig_deduc = "+deduc1+", "
                                    + "tax_dduc = "+deduc4+" "
                                    + "where pr_code = '"+code+"' and "
                                    + "emp_id = "+id+" and "
                                    + "lastname = '"+l+"' and "
                                    + "firstname = '"+f+"' and "
                                    + "middlename = '"+m+"';");
                                    
                            pst.execute();
                        }
                           catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    }

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
               
                JOptionPane.showMessageDialog(null,"Details is Updated successfully");
                table();
                po2.setEditable(false);
                bs2.setEditable(false);
                sr1.setEditable(false);
                noe.setEditable(false);
                positiontable.setEnabled(true);
                po3.setEnabled(true);
                refreshpo.setEnabled(true);
                save1.setEnabled(false);
                cancel1.setEnabled(false);
                newemp1.setEnabled(true);
                editemp1.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_save1ActionPerformed

    private void bs2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bs2KeyReleased
        // TODO add your handling code here:
        double hourlyrate = (Double.parseDouble(bs2.getText())*12)/day/8;
        sr1.setText(String.valueOf(hourlyrate));
    }//GEN-LAST:event_bs2KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(position.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(position.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(position.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(position.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                position dialog = new position(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bs2;
    private javax.swing.JButton cancel1;
    private javax.swing.JButton editemp1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newemp1;
    private javax.swing.JTextField noe;
    private javax.swing.JTextField po2;
    public static javax.swing.JComboBox<String> po3;
    private javax.swing.JTable positiontable;
    private javax.swing.JButton refreshpo;
    private javax.swing.JButton save1;
    private javax.swing.JTextField sr1;
    // End of variables declaration//GEN-END:variables
public String getValue(String title){
    String value = "";
        try{
            prop.load(new FileInputStream("config.properties"));
            value = prop.getProperty(title);
        }
        catch(Exception e){JOptionPane.showMessageDialog(null, "2");}
        return value;
}
}
