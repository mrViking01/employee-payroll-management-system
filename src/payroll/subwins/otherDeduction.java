/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package payroll.subwins;

import java.awt.event.KeyEvent;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import payroll.main.db;
import payroll.secSubWins.*;

/**
 *
 * @author ASUS
 */
public class otherDeduction extends javax.swing.JDialog {
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    int state;
    /**
     * Creates new form otherDeduction
     */
    public otherDeduction(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        code();
        table();
    }
    public void table(){
        try{
            conn = db.db();
            pst = conn.prepareStatement("SELECT * FROM payroll_schema.otherdeduction_tbl order by date desc;");
            rs = pst.executeQuery();
            odtbl.setModel(DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception e){}
    }
    public void code(){
        Date cd = GregorianCalendar.getInstance().getTime();
        SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
        String code = mf.format(cd);
        
        searchCode.setText(code+"OD");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        empid = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        last = new javax.swing.JTextField();
        first = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        detail = new javax.swing.JTextArea();
        jLabel34 = new javax.swing.JLabel();
        odcode = new javax.swing.JTextField();
        middle = new javax.swing.JTextField();
        recordNow = new javax.swing.JRadioButton();
        dontRecord = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        odtbl = new javax.swing.JTable();
        searchCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        searchId = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cancel1 = new javax.swing.JButton();
        save1 = new javax.swing.JButton();
        newemp1 = new javax.swing.JButton();
        edit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Other Deduction");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other Deductions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel33.setText("Employee's ID");

        empid.setEditable(false);
        empid.setBackground(new java.awt.Color(255, 255, 255));
        empid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                empidKeyReleased(evt);
            }
        });

        jLabel35.setText("Employee's Name");

        last.setEditable(false);
        last.setBackground(new java.awt.Color(255, 255, 255));

        first.setEditable(false);
        first.setBackground(new java.awt.Color(255, 255, 255));
        first.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstActionPerformed(evt);
            }
        });

        jLabel3.setText("Date");

        date.setEditable(false);
        date.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setText("Amount:");

        amount.setEditable(false);
        amount.setBackground(new java.awt.Color(255, 255, 255));
        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });

        jLabel5.setText("Deduction Detail");

        detail.setEditable(false);
        detail.setColumns(20);
        detail.setRows(5);
        jScrollPane3.setViewportView(detail);

        jLabel34.setText("OD Code");

        odcode.setEditable(false);
        odcode.setBackground(new java.awt.Color(255, 255, 255));

        middle.setEditable(false);
        middle.setBackground(new java.awt.Color(255, 255, 255));
        middle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                middleActionPerformed(evt);
            }
        });

        recordNow.setBackground(new java.awt.Color(255, 255, 255));
        recordNow.setText("Recorded");
        recordNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordNowActionPerformed(evt);
            }
        });

        dontRecord.setBackground(new java.awt.Color(255, 255, 255));
        dontRecord.setText("Not Yet Recorded");
        dontRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dontRecordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(jLabel33))
                        .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(middle, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(empid, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(odcode, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 354, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(5, 5, 5))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dontRecord)
                            .addComponent(recordNow)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(odcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(empid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(middle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(recordNow)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dontRecord)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        odtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Adjustment Code", "ID", "Last Name", "First Name", "Middle Name", "Amount", "date", "status", "detail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        odtbl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        odtbl.setShowHorizontalLines(false);
        odtbl.setShowVerticalLines(false);
        odtbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                odtblMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(odtbl);

        searchCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCodeActionPerformed(evt);
            }
        });
        searchCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCodeKeyReleased(evt);
            }
        });

        jLabel1.setText("Code");

        jLabel7.setText("ID");

        searchId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchIdActionPerformed(evt);
            }
        });
        searchId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchIdKeyReleased(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/images/refresh_update.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addComponent(searchId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(59, 89, 152));

        cancel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancel1.setText("Cancel");
        cancel1.setEnabled(false);
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        save1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        save1.setText("Save");
        save1.setEnabled(false);
        save1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save1ActionPerformed(evt);
            }
        });

        newemp1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newemp1.setText("New");
        newemp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newemp1ActionPerformed(evt);
            }
        });

        edit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newemp1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(save1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cancel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(save1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newemp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(11, 11, 11))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstActionPerformed

    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountActionPerformed

    private void odtblMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odtblMouseReleased
        // TODO add your handling code here:
        DefaultTableModel pm = (DefaultTableModel)odtbl.getModel();
        int sr = odtbl.getSelectedRow();
        odcode.setText(pm.getValueAt(sr, 0).toString());
        empid.setText(pm.getValueAt(sr, 1).toString());
        last.setText(pm.getValueAt(sr, 2).toString());
        first.setText(pm.getValueAt(sr, 3).toString());
        middle.setText(pm.getValueAt(sr, 4).toString());
        amount.setText(pm.getValueAt(sr, 5).toString());
        detail.setText(pm.getValueAt(sr, 6).toString());
        date.setText(pm.getValueAt(sr, 7).toString());
        String b = pm.getValueAt(sr, 8).toString();
        if(b.equals("Recorded")){
            recordNow.setSelected(true);
            dontRecord.setSelected(false);
        }
        if(b.equals("Not Yet Recorded")){
            recordNow.setSelected(false);
            dontRecord.setSelected(true);
        }
    }//GEN-LAST:event_odtblMouseReleased

    private void searchCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCodeActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchCodeActionPerformed

    private void searchIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIdActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchIdActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        odcode.setText("");
        empid.setText("");
        last.setText("");
        first.setText("");
        middle.setText("");
        amount.setText("");
        date.setText("");
        detail.setText("");
        try{
            conn = db.db();
            pst = conn.prepareStatement("SELECT * FROM payroll_schema.otherdeduction_tbl;");
            rs = pst.executeQuery();
            odtbl.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void middleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_middleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_middleActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        // TODO add your handling code here:
        int p = JOptionPane.showConfirmDialog(null, "Do you want to cancel?","Add Record",JOptionPane.YES_NO_OPTION);
        if(p == 0){
            odcode.setEditable(false);
            empid.setEditable(false);
            last.setEditable(false);
            first.setEditable(false);
            middle.setEditable(false);
            detail.setEditable(false);
            amount.setEditable(false);
            date.setEditable(false);

            save1.setEnabled(false);
            cancel1.setEnabled(false);
            newemp1.setEnabled(true);
            edit.setEnabled(true);
            jButton1.setEnabled(true);
            odtbl.setEnabled(true);

            odcode.setText("");
            empid.setText("");
            last.setText("");
            first.setText("");
            middle.setText("");
            detail.setText("");
            amount.setText("");
            date.setText("");
            
            recordNow.setSelected(false);
            dontRecord.setSelected(false);

        }
    }//GEN-LAST:event_cancel1ActionPerformed

    private void save1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save1ActionPerformed
        // TODO add your handling code here:
        if(state == 1){
            if(empid.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The id is empty");
            }
            if(odcode.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The leave code is empty");
            }
            if(first.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The first name is empty");
            }
            if(last.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The last name is empty");
            }
            if(middle.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The middle name is empty");
            }
            if(detail.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The detail is empty");
            }
            if(amount.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The amount is empty");
            }

            if(!empid.getText().equals("") && !odcode.getText().equals("") && !first.getText().equals("") && !last.getText().equals("") && !middle.getText().equals("") && !detail.getText().equals("") && !amount.getText().equals("")){
                    
                        int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to Add This Deduction for this Employee?","Add Record",JOptionPane.YES_NO_OPTION);
                        if(p == 0){
                    if(recordNow.isSelected()){
                        

                        java.util.Date cd = GregorianCalendar.getInstance().getTime();
                        SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                        String dtm = mf.format(cd);
                        String mnth = dtm.substring(0, 2);
                        String yr = dtm.substring(2,6);
                        Integer m = Integer.parseInt(mnth);
                        Integer y = Integer.parseInt(yr);


                        try{
                            conn = db.db();
                            pst = conn.prepareStatement("insert into payroll_schema.otherdeduction_tbl values (?,?,?,?,?,?,?,?,'Recorded');");
                            pst.setString(1,odcode.getText());
                            pst.setString(2,empid.getText());
                            pst.setString(3,last.getText());
                            pst.setString(4,first.getText());
                            pst.setString(5,middle.getText());
                            pst.setString(6,amount.getText());
                            pst.setString(7,detail.getText());
                            pst.setString(8,date.getText());
                            pst.execute();
                        }
                        catch(Exception e){}
                        try{
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                                pst.setString(1, empid.getText());
                                pst.setString(2, m+""+y+"PYRLL");
                                rs = pst.executeQuery();
                                    while(rs.next()){
                                        Double a = Double.parseDouble(rs.getString("other_deduc"));
                                        Double s = Double.parseDouble(amount.getText());
                                        double b = a + s;
                                        String d = String.valueOf(b);
                                        try{
                                            conn = db.db();
                                            pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET other_deduc = ? WHERE emp_id = ? and pr_code = ?;");
                                            pst.setString(3, m+""+y+"PYRLL");
                                            pst.setString(2, empid.getText());
                                            pst.setString(1, d);
                                            pst.execute();
                                        }
                                        catch(Exception e){
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, e);
                                }
                        JOptionPane.showMessageDialog(null, "Success");
                        odcode.setEditable(false);
                        empid.setEditable(false);
                        last.setEditable(false);
                        first.setEditable(false);
                        middle.setEditable(false);
                        detail.setEditable(false);
                        amount.setEditable(false);
                        date.setEditable(false);

                        save1.setEnabled(false);
                        cancel1.setEnabled(false);
                        newemp1.setEnabled(true);
                        edit.setEnabled(true);
                        jButton1.setEnabled(true);
                        odtbl.setEnabled(true);
                        table();
                    }if(dontRecord.isSelected()){
                        try{
                            conn = db.db();
                            pst = conn.prepareStatement("insert into payroll_schema.otherdeduction_tbl values (?,?,?,?,?,?,?,?,'Not Yet Recorded');");
                            pst.setString(1,odcode.getText());
                            pst.setString(2,empid.getText());
                            pst.setString(3,last.getText());
                            pst.setString(4,first.getText());
                            pst.setString(5,middle.getText());
                            pst.setString(6,amount.getText());
                            pst.setString(7,detail.getText());
                            pst.setString(8,date.getText());
                            pst.execute();
                        }
                        catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    JOptionPane.showMessageDialog(null, "Success");
                    odcode.setEditable(false);
                    empid.setEditable(false);
                    last.setEditable(false);
                    first.setEditable(false);
                    middle.setEditable(false);
                    detail.setEditable(false);
                    amount.setEditable(false);
                    date.setEditable(false);

                    save1.setEnabled(false);
                    cancel1.setEnabled(false);
                    newemp1.setEnabled(true);
                    edit.setEnabled(true);
                    jButton1.setEnabled(true);
                    odtbl.setEnabled(true);
                    table();
                    }
                }
            }

        }
        if(state == 2){
            if(empid.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The id is empty");
            }
            if(odcode.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The leave code is empty");
            }
            if(first.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The first name is empty");
            }
            if(last.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The last name is empty");
            }
            if(middle.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The middle name is empty");
            }
            if(detail.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The detail is empty");
            }
            if(amount.getText().equals("")){
                JOptionPane.showMessageDialog(null, "The amount is empty");
            }
            if(!empid.getText().equals("") && !odcode.getText().equals("") && !first.getText().equals("") && !last.getText().equals("") && !middle.getText().equals("") && !detail.getText().equals("") && !amount.getText().equals("")){
                
                
                    if(recordNow.isSelected()){

                        int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to Update This Deduction for this Employee?","Update Record",JOptionPane.YES_NO_OPTION);
                        if(p == 0){
                        java.util.Date cd = GregorianCalendar.getInstance().getTime();
                        SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                        String dtm = mf.format(cd);
                        String mnth = dtm.substring(0, 2);
                        String yr = dtm.substring(2,6);
                        Integer m = Integer.parseInt(mnth);
                        Integer y = Integer.parseInt(yr);


                        try{
                            conn = db.db();
                            pst = conn.prepareStatement("update payroll_schema.otherdeduction_tbl set amount_deduc = ?, detail = ?, status = 'Recorded' where deduc_code = ? and emp_id = ? and lastname = ? and firstname = ? and middlename = ? and date = ?;");
                            pst.setString(3,odcode.getText());
                            pst.setString(4,empid.getText());
                            pst.setString(5,last.getText());
                            pst.setString(6,first.getText());
                            pst.setString(7,middle.getText());
                            pst.setString(1,amount.getText());
                            pst.setString(2,detail.getText());
                            pst.setString(8,date.getText());
                            pst.execute();
                        }
                        catch(Exception e){}
                        try{
                            conn = db.db();
                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                            pst.setString(1, empid.getText());
                            pst.setString(2, m+""+y+"PYRLL");
                            rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("other_deduc"));
                                Double s = Double.parseDouble(amount.getText());
                                double b = a + s;
                                String d = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET other_deduc = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, empid.getText());
                                    pst.setString(1, d);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, e);
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, e);
                        }
                        JOptionPane.showMessageDialog(null, "Success");
                        odcode.setEditable(false);
                        empid.setEditable(false);
                        last.setEditable(false);
                        first.setEditable(false);
                        middle.setEditable(false);
                        detail.setEditable(false);
                        amount.setEditable(false);
                        date.setEditable(false);

                        save1.setEnabled(false);
                        cancel1.setEnabled(false);
                        newemp1.setEnabled(true);
                        edit.setEnabled(true);
                        jButton1.setEnabled(true);
                        odtbl.setEnabled(true);
                        table();
                    }if(dontRecord.isSelected()){


                        java.util.Date cd = GregorianCalendar.getInstance().getTime();
                        SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                        String dtm = mf.format(cd);
                        String mnth = dtm.substring(0, 2);
                        String yr = dtm.substring(2,6);
                        Integer m = Integer.parseInt(mnth);
                        Integer y = Integer.parseInt(yr);


                        try{
                            conn = db.db();
                            pst = conn.prepareStatement("update payroll_schema.otherdeduction_tbl set amount_deduc = ?, detail = ?, status = 'Not Yet Recorded' where deduc_code = ? and emp_id = ? and lastname = ? and firstname = ? and middlename = ? and date = ?;");
                            pst.setString(3,odcode.getText());
                            pst.setString(4,empid.getText());
                            pst.setString(5,last.getText());
                            pst.setString(6,first.getText());
                            pst.setString(7,middle.getText());
                            pst.setString(1,amount.getText());
                            pst.setString(2,detail.getText());
                            pst.setString(8,date.getText());
                            pst.execute();
                        }
                        catch(Exception e){}
                        try{
                            conn = db.db();
                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = ?;");
                            pst.setString(2, m+""+y+"PYRLL");
                            pst.setString(1, empid.getText());
                            rs = pst.executeQuery();
                            while(rs.next()){
                                Double a = Double.parseDouble(rs.getString("other_deduc"));
                                Double s = Double.parseDouble(amount.getText());
                                double b = a - s;
                                String w = String.valueOf(b);
                                try{
                                    conn = db.db();
                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET other_deduc = ? WHERE emp_id = ? and pr_code = ?;");
                                    pst.setString(3, m+""+y+"PYRLL");
                                    pst.setString(2, empid.getText());
                                    pst.setString(1, w);
                                    pst.execute();
                                }
                                catch(Exception e){
                                    JOptionPane.showMessageDialog(null, e);
                                }
                            }
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, e);
                        }
                        JOptionPane.showMessageDialog(null, "Success");
                        odcode.setEditable(false);
                        empid.setEditable(false);
                        last.setEditable(false);
                        first.setEditable(false);
                        middle.setEditable(false);
                        detail.setEditable(false);
                        amount.setEditable(false);
                        date.setEditable(false);

                        save1.setEnabled(false);
                        cancel1.setEnabled(false);
                        newemp1.setEnabled(true);
                        edit.setEnabled(true);
                        jButton1.setEnabled(true);
                        odtbl.setEnabled(true);
                        table();
                    }
                }
            }
        }
    }//GEN-LAST:event_save1ActionPerformed

    private void newemp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newemp1ActionPerformed
        // TODO add your handling code here:
        int p = JOptionPane.showConfirmDialog(null, "Do you want to add a other deduction record?","Add Record",JOptionPane.YES_NO_OPTION);
        if(p == 0){
            state = 1;
            Date cd = GregorianCalendar.getInstance().getTime();
            SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
            String dateString = df.format(cd);

            date.setText(dateString);

            SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
            String code = mf.format(cd);

            odcode.setText(code+"OD");
            
            odcode.setEditable(true);
            empid.setEditable(true);
            last.setEditable(true);
            first.setEditable(true);
            middle.setEditable(true);
            detail.setEditable(true);
            amount.setEditable(true);
            date.setEditable(true);

            save1.setEnabled(true);
            cancel1.setEnabled(true);
            newemp1.setEnabled(false);
            edit.setEnabled(false);
            jButton1.setEnabled(false);
           odtbl.setEnabled(false);

            empid.setText("");
            last.setText("");
            first.setText("");
            middle.setText("");
            detail.setText("");
            amount.setText("");
        }
    }//GEN-LAST:event_newemp1ActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
        if(empid.getText().equals("") &&odcode.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please select a deduction record to update");
        }else{
            int p = JOptionPane.showConfirmDialog(null, "Do you want to update a deduction record?","Update Record",JOptionPane.YES_NO_OPTION);
            if(p == 0){
                state = 2;
               odcode.setEditable(true);
                empid.setEditable(true);
                last.setEditable(true);
                first.setEditable(true);
                middle.setEditable(true);
                detail.setEditable(true);
                amount.setEditable(true);
                date.setEditable(true);

                save1.setEnabled(true);
                cancel1.setEnabled(true);
                newemp1.setEnabled(false);
                edit.setEnabled(false);
                jButton1.setEnabled(false);
               odtbl.setEnabled(false);
            }
        }
    }//GEN-LAST:event_editActionPerformed

    private void recordNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordNowActionPerformed
        // TODO add your handling code here:
        recordNow.setSelected(true);
        dontRecord.setSelected(false);
    }//GEN-LAST:event_recordNowActionPerformed

    private void dontRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dontRecordActionPerformed
        // TODO add your handling code here:
        dontRecord.setSelected(true);
        recordNow.setSelected(false);
    }//GEN-LAST:event_dontRecordActionPerformed

    private void empidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_empidKeyReleased
        // TODO add your handling code here:
        if(empid.getText().equals("")){
            first.setText("");
            last.setText("");
            middle.setText("");
        }else{
        try{
        conn = db.db();
        pst = conn.prepareStatement("SELECT * FROM payroll_schema.emp_tbl where emp_id = ?;");
        pst.setString(1, empid.getText());
        rs = pst.executeQuery();
        while(rs.next()){
            first.setText(rs.getString("firstname"));
            last.setText(rs.getString("lastname"));
            middle.setText(rs.getString("middlename"));
            
        }
    }
        catch(Exception e){}
        
    }
    }//GEN-LAST:event_empidKeyReleased

    private void searchCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCodeKeyReleased
        // TODO add your handling code here:
        if(!(evt.getKeyChar() == KeyEvent.VK_ENTER)){
            if(searchCode.getText().equals("")){
                code();
                table();
            }else{
                try{
                    conn = db.db();
                    pst = conn.prepareStatement("SELECT * FROM payroll_schema.otherdeduction_tbl where od_code like'%"+searchCode.getText()+"%' order by date desc;");
                    pst.setString(1, searchCode.getText());
                    rs = pst.executeQuery();
                    odtbl.setModel(DbUtils.resultSetToTableModel(rs));
                }
                catch(Exception e){}
            }
            }
    }//GEN-LAST:event_searchCodeKeyReleased

    private void searchIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchIdKeyReleased
        // TODO add your handling code here:
        if(!(evt.getKeyChar() == KeyEvent.VK_ENTER)){
            if(searchCode.getText().equals("")){
                code();
                table();
            }else{
                try{
                    conn = db.db();
                    pst = conn.prepareStatement("SELECT * FROM payroll_schema.otherdeduction_tbl where emp_id like'%"+searchId.getText()+"%' order by date desc;");
                    rs = pst.executeQuery();
                    odtbl.setModel(DbUtils.resultSetToTableModel(rs));
                }
                catch(Exception e){}
            }
        }
    }//GEN-LAST:event_searchIdKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(otherDeduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(otherDeduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(otherDeduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(otherDeduction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                otherDeduction dialog = new otherDeduction(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.JButton cancel1;
    private javax.swing.JTextField date;
    private javax.swing.JTextArea detail;
    private javax.swing.JRadioButton dontRecord;
    private javax.swing.JButton edit;
    private javax.swing.JTextField empid;
    private javax.swing.JTextField first;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField last;
    private javax.swing.JTextField middle;
    private javax.swing.JButton newemp1;
    private javax.swing.JTextField odcode;
    private javax.swing.JTable odtbl;
    private javax.swing.JRadioButton recordNow;
    private javax.swing.JButton save1;
    private javax.swing.JTextField searchCode;
    private javax.swing.JTextField searchId;
    // End of variables declaration//GEN-END:variables
}
