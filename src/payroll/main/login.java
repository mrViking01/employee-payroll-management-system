/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package payroll.main;

import java.awt.event.KeyEvent;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author ASUS
 */
public class login extends javax.swing.JFrame {

    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    Properties prop = new Properties();

    /**
     * Creates new form login
     */
    public login() {
        initComponents();
        setLocationRelativeTo(null);
        ShowTime();
        try {
            Config();
        } catch (Exception ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
        }
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("lo.png")));
    }

    public void ShowTime() {
        // <editor-fold defaultstate="collapsed" desc="For Time">
        int run = 0;
        new Thread() {
            public void run() {
                while (run == 0) {
                    Calendar cal = new GregorianCalendar();
                    int second, minute, hour, am_pm;
                    second = cal.get(Calendar.SECOND);
                    minute = cal.get(Calendar.MINUTE);
                    hour = cal.get(Calendar.HOUR);
                    am_pm = cal.get(Calendar.AM_PM);

                    String AM_PM = "";

                    if (am_pm == 1) {
                        AM_PM = "PM";
                    } else {
                        AM_PM = "AM";
                    }
                    clock.setText(hour + ":" + minute + ":" + second + " " + AM_PM);
                }
            }
        }.start();
        // </editor-fold>
    }

    public void Config() throws Exception {
        File philhealthConfig = new File("config.properties");

        if (!philhealthConfig.exists()) {
            philhealthConfig.createNewFile();
            prop.setProperty("v11", "2.75");
            prop.setProperty("dir", "C:\\BARRCompany\\");
            prop.setProperty("days", "260");
            prop.store(new FileOutputStream("config.properties"), null);
        }
    }

    public void AuthenticateLogin() {
        ResultSet result;

        java.util.Date time = GregorianCalendar.getInstance().getTime();
        SimpleDateFormat format = new SimpleDateFormat("MMyyyy");
        String date = format.format(time);
        int month = Integer.parseInt(date.substring(0, 2));
        int year = Integer.parseInt(date.substring(2, 6));
        String code = month + "" + year + "PYRLL";

        if (inputUN.getText().equals("") || inputPass.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some Field is not Filled");
        } else {

            String[] values = new String[2];

            result = Database.SendQuery("", values);

            try {
                if (result.next()) {
                    EmployeeInfo info = new EmployeeInfo(
                            result.getString("id"),
                            result.getString("firstName"),
                            result.getString("middleName"),
                            result.getString("lastName")
                    );
                    
                    String accessLevel = result.getString("accessLevel");
                    
                    
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clock = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        inputUN = new javax.swing.JTextField();
        inputPass = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Log In");
        setUndecorated(true);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(59, 89, 152));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/images/login_logo.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll/images/login_companylogo.png"))); // NOI18N

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("V 1.0");

        clock.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clock.setForeground(new java.awt.Color(255, 255, 255));
        clock.setText("Time");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1))
                    .addComponent(clock))
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clock)
                .addGap(77, 77, 77)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 140, 300));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        inputUN.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        inputUN.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputUN.setToolTipText("Enter User Name");
        inputUN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputUNKeyReleased(evt);
            }
        });

        inputPass.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        inputPass.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputPass.setToolTipText("Enter your password");
        inputPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputPassKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Please Enter your User Name and Password");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("User Name");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Password");

        jPanel3.setBackground(new java.awt.Color(102, 153, 255));
        jPanel3.setToolTipText("Log In");
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel3MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel3MouseReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Log In");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel8)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("X");
        jLabel9.setToolTipText("Close System");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel9MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel9MouseReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setText("-");
        jLabel10.setToolTipText("Minimize");
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel10MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputPass, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputUN, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jLabel6))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jLabel7)))
                        .addGap(23, 23, 23))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addGap(16, 16, 16)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inputUN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inputPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 320, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseReleased
        // TODO add your handling code here:
        // <editor-fold defaultstate="collapsed" desc="Access level Idintifier">
        //SELECT * FROM payroll_schema.timemonitor_tbl where id  = 1001 ORDER BY date_in DESC;
        //sql command to select row
        if (inputUN.getText().equals("") || inputPass.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Some Field is not Filled");
        } else {
            try {
                conn = Database.Connect();
                pst = conn.prepareStatement("SELECT * FROM payroll_schema.account_tbl WHERE username = ? and password = ? ;");
                pst.setString(1, inputUN.getText());
                pst.setString(2, inputPass.getText());
                rs = pst.executeQuery();

                java.util.Date gre = GregorianCalendar.getInstance().getTime();
                SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                String dt = mf.format(gre);
                String mnth = dt.substring(0, 2);
                String yr = dt.substring(2, 6);
                Integer m = Integer.parseInt(mnth);
                Integer y = Integer.parseInt(yr);
                String code = m + "" + y + "PYRLL";

                if (rs.next()) {
                    String opt = rs.getString("division");
                    String usr = rs.getString("emp_acc_id");
                    String frname = rs.getString("firstname");
                    String lsname = rs.getString("lastname");
                    emp.empid = rs.getString("emp_acc_id");
                    emp.empfn = rs.getString("firstname");
                    emp.empln = rs.getString("lastname");

                    if (opt.equals("Admin")) {
                        AdminWindow main = new AdminWindow(usr, frname, lsname, opt);
                        main.setLocationRelativeTo(null);
                        main.setExtendedState(6);
                        main.setVisible(true);
                        this.dispose();

                        Date cd = GregorianCalendar.getInstance().getTime();
                        SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                        String dateString = df.format(cd);

                        Date d = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        String timeString = sdf.format(d);

                        String ds = dateString;
                        String ts = timeString;
                        time.datein = ds;
                        time.timein = ts;

                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                            pst.setString(1, usr);
                            rs = pst.executeQuery();
                            while (rs.next()) {
                                String s = rs.getString("date_in");
                                if (!(ds.equals(s))) {
                                    try {
                                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                        pst.setString(1, usr);
                                        rs = pst.executeQuery();
                                        while (rs.next()) {
                                            String id = rs.getString("emp_id");
                                            int f = rs.getInt("worked_day");
                                            int a = f + 1;
                                            String h = String.valueOf(a);
                                            try {
                                                pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                pst.setString(1, h);
                                                pst.setString(2, usr);
                                                pst.execute();
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, e);
                                            }
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, e);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                            pst.execute();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        //this.dispose();
                    }

                    if (opt.equals("Manager")) {
                        ManagerWindow main = new ManagerWindow(usr, frname, lsname, opt);
                        main.setLocationRelativeTo(null);
                        main.setExtendedState(6);
                        main.setVisible(true);
                        this.dispose();

                        Date cd = GregorianCalendar.getInstance().getTime();
                        DateFormat df = DateFormat.getDateInstance();
                        String dateString = df.format(cd);

                        Date d = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        String timeString = sdf.format(d);

                        String ds = dateString;
                        String ts = timeString;
                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                            pst.setString(1, usr);
                            rs = pst.executeQuery();
                            while (rs.next()) {
                                String s = rs.getString("date_in");
                                if (!(ds.equals(s))) {
                                    try {
                                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                        pst.setString(1, usr);
                                        rs = pst.executeQuery();
                                        while (rs.next()) {
                                            String id = rs.getString("emp_id");
                                            int f = rs.getInt("worked_day");
                                            int a = f + 1;
                                            String h = String.valueOf(a);
                                            try {
                                                pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                pst.setString(1, h);
                                                pst.setString(2, usr);
                                                pst.execute();
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, e);
                                            }
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, e);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                            pst.execute();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        //this.dispose();
                    }

                    if (opt.equals("Accountant")) {
                        AccountantWindow main = new AccountantWindow(usr, frname, lsname, opt);
                        main.setLocationRelativeTo(null);
                        main.setVisible(true);
                        this.dispose();

                        Date cd = GregorianCalendar.getInstance().getTime();
                        DateFormat df = DateFormat.getDateInstance();
                        String dateString = df.format(cd);

                        Date d = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        String timeString = sdf.format(d);

                        String ds = dateString;
                        String ts = timeString;

                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                            pst.setString(1, usr);
                            rs = pst.executeQuery();
                            while (rs.next()) {
                                String s = rs.getString("date_in");
                                if (!(ds.equals(s))) {
                                    try {
                                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                        pst.setString(1, usr);
                                        rs = pst.executeQuery();
                                        while (rs.next()) {
                                            String id = rs.getString("emp_id");
                                            int f = rs.getInt("worked_day");
                                            int a = f + 1;
                                            String h = String.valueOf(a);
                                            try {
                                                pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                pst.setString(1, h);
                                                pst.setString(2, usr);
                                                pst.execute();
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, e);
                                            }
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, e);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                            pst.execute();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        //this.dispose();
                    }

                    if (opt.equals("Employee")) {
                        EmployeeWindow main = new EmployeeWindow(usr, frname, lsname, opt);
                        main.setExtendedState(6);
                        main.setLocationRelativeTo(null);
                        main.setVisible(true);
                        this.dispose();

                        Date cd = GregorianCalendar.getInstance().getTime();
                        DateFormat df = DateFormat.getDateInstance();
                        String dateString = df.format(cd);

                        Date d = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                        String timeString = sdf.format(d);

                        String ds = dateString;
                        String ts = timeString;
                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                            pst.setString(1, usr);
                            rs = pst.executeQuery();
                            while (rs.next()) {
                                String s = rs.getString("date_in");
                                if (!(ds.equals(s))) {
                                    try {
                                        pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                        pst.setString(1, usr);
                                        rs = pst.executeQuery();
                                        while (rs.next()) {
                                            String id = rs.getString("emp_id");
                                            int f = rs.getInt("worked_day");
                                            int a = f + 1;
                                            String h = String.valueOf(a);
                                            try {
                                                pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                pst.setString(1, h);
                                                pst.setString(2, usr);
                                                pst.execute();
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, e);
                                            }
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, e);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        try {
                            conn = db.db();
                            pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                            pst.execute();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        //this.dispose();
                    }

                } else {
                    JOptionPane.showMessageDialog(rootPane, "ID or Password is incorrect", "Error", 1);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        // </editor-fold>
    }//GEN-LAST:event_jPanel3MouseReleased

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        // TODO add your handling code here:
        setLocationRelativeTo(null);
    }//GEN-LAST:event_formComponentMoved

    private void jLabel9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseEntered
        // TODO add your handling code here:
        jLabel9.setForeground(Color.red);
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jLabel9MouseEntered

    private void jLabel9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseExited
        // TODO add your handling code here:
        jLabel9.setForeground(Color.black);
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jLabel9MouseExited

    private void jLabel9MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseReleased
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel9MouseReleased

    private void jPanel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseEntered
        // TODO add your handling code here:
        jPanel3.setBackground(new Color(0, 128, 255));
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jPanel3MouseEntered

    private void jPanel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseExited
        // TODO add your handling code here:
        jPanel3.setBackground(new Color(102, 153, 255));
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jPanel3MouseExited

    private void jLabel10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseEntered
        // TODO add your handling code here:
        jLabel10.setForeground(new Color(102, 153, 255));
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jLabel10MouseEntered

    private void jLabel10MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseExited
        // TODO add your handling code here:
        jLabel10.setForeground(Color.black);
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jLabel10MouseExited

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel10MouseClicked

    private void inputPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputPassKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // <editor-fold defaultstate="collapsed" desc="Access level Idintifier">
            if (inputUN.getText().equals("") || inputPass.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Some Field is not Filled");
            } else {
                try {
                    conn = db.db();
                    pst = conn.prepareStatement("SELECT * FROM payroll_schema.account_tbl WHERE username = ? and password = ? ;");
                    pst.setString(1, inputUN.getText());
                    pst.setString(2, inputPass.getText());
                    rs = pst.executeQuery();

                    if (rs.next()) {
                        String opt = rs.getString("division");
                        String usr = rs.getString("emp_acc_id");
                        String frname = rs.getString("firstname");
                        String lsname = rs.getString("lastname");
                        emp.empid = rs.getString("emp_acc_id");
                        emp.empfn = rs.getString("firstname");
                        emp.empln = rs.getString("lastname");

                        java.util.Date gre = GregorianCalendar.getInstance().getTime();
                        SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                        String dt = mf.format(gre);
                        String mnth = dt.substring(0, 2);
                        String yr = dt.substring(2, 6);
                        Integer m = Integer.parseInt(mnth);
                        Integer y = Integer.parseInt(yr);
                        String code = m + "" + y + "PYRLL";

                        if (opt.equals("Admin")) {
                            AdminWindow main = new AdminWindow(usr, frname, lsname, opt);
                            main.setLocationRelativeTo(null);
                            main.setExtendedState(6);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            time.datein = ds;
                            time.timein = ts;

                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            //this.dispose();
                        }

                        if (opt.equals("Manager")) {
                            ManagerWindow main = new ManagerWindow(usr, frname, lsname, opt);
                            main.setLocationRelativeTo(null);
                            main.setExtendedState(6);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            DateFormat df = DateFormat.getDateInstance();
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            //this.dispose();
                        }

                        if (opt.equals("Accountant")) {
                            AccountantWindow main = new AccountantWindow(usr, frname, lsname, opt);
                            main.setLocationRelativeTo(null);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            DateFormat df = DateFormat.getDateInstance();
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            //this.dispose();
                        }

                        if (opt.equals("Employee")) {
                            EmployeeWindow main = new EmployeeWindow(usr, frname, lsname, opt);
                            main.setExtendedState(6);
                            main.setLocationRelativeTo(null);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            DateFormat df = DateFormat.getDateInstance();
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            //this.dispose();
                        }

                    } else {
                        JOptionPane.showMessageDialog(rootPane, "ID or Password is incorrect", "Error", 1);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
            // </editor-fold>
        }
    }//GEN-LAST:event_inputPassKeyReleased

    private void inputUNKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputUNKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // <editor-fold defaultstate="collapsed" desc="Access level Idintifier">
            if (inputUN.getText().equals("") || inputPass.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Some Field is not Filled");
            } else {
                try {
                    conn = db.db();
                    pst = conn.prepareStatement("SELECT * FROM payroll_schema.account_tbl WHERE username = ? and password = ? ;");
                    pst.setString(1, inputUN.getText());
                    pst.setString(2, inputPass.getText());
                    rs = pst.executeQuery();

                    if (rs.next()) {
                        String opt = rs.getString("division");
                        String usr = rs.getString("emp_acc_id");
                        String frname = rs.getString("firstname");
                        String lsname = rs.getString("lastname");
                        emp.empid = rs.getString("emp_acc_id");
                        emp.empfn = rs.getString("firstname");
                        emp.empln = rs.getString("lastname");

                        java.util.Date gre = GregorianCalendar.getInstance().getTime();
                        SimpleDateFormat mf = new SimpleDateFormat("MMyyyy");
                        String dt = mf.format(gre);
                        String mnth = dt.substring(0, 2);
                        String yr = dt.substring(2, 6);
                        Integer m = Integer.parseInt(mnth);
                        Integer y = Integer.parseInt(yr);
                        String code = m + "" + y + "PYRLL";

                        if (opt.equals("Admin")) {
                            AdminWindow main = new AdminWindow(usr, frname, lsname, opt);
                            main.setLocationRelativeTo(null);
                            main.setExtendedState(6);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            time.datein = ds;
                            time.timein = ts;

                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }

                            //this.dispose();
                        }

                        if (opt.equals("Manager")) {
                            ManagerWindow main = new ManagerWindow(usr, frname, lsname, opt);
                            main.setLocationRelativeTo(null);
                            main.setExtendedState(6);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            DateFormat df = DateFormat.getDateInstance();
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            //this.dispose();
                        }

                        if (opt.equals("Accountant")) {
                            AccountantWindow main = new AccountantWindow(usr, frname, lsname, opt);
                            main.setLocationRelativeTo(null);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            DateFormat df = DateFormat.getDateInstance();
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            //this.dispose();
                        }

                        if (opt.equals("Employee")) {
                            EmployeeWindow main = new EmployeeWindow(usr, frname, lsname, opt);
                            main.setExtendedState(6);
                            main.setLocationRelativeTo(null);
                            main.setVisible(true);
                            this.dispose();

                            Date cd = GregorianCalendar.getInstance().getTime();
                            DateFormat df = DateFormat.getDateInstance();
                            String dateString = df.format(cd);

                            Date d = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            String timeString = sdf.format(d);

                            String ds = dateString;
                            String ts = timeString;
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("SELECT * FROM payroll_schema.timemonitor_tbl where id  = ? AND status = 'Logged Out' ORDER BY date_in DESC Limit 1;");
                                pst.setString(1, usr);
                                rs = pst.executeQuery();
                                while (rs.next()) {
                                    String s = rs.getString("date_in");
                                    if (!(ds.equals(s))) {
                                        try {
                                            pst = conn.prepareStatement("SELECT * FROM payroll_schema.payroll_tbl WHERE emp_id = ? and pr_code = '" + code + "';");
                                            pst.setString(1, usr);
                                            rs = pst.executeQuery();
                                            while (rs.next()) {
                                                String id = rs.getString("emp_id");
                                                int f = rs.getInt("worked_day");
                                                int a = f + 1;
                                                String h = String.valueOf(a);
                                                try {
                                                    pst = conn.prepareStatement("UPDATE payroll_schema.payroll_tbl SET worked_day = ? WHERE emp_id = ? and pr_code = '" + code + "';");
                                                    pst.setString(1, h);
                                                    pst.setString(2, usr);
                                                    pst.execute();
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, e);
                                                }
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            try {
                                conn = db.db();
                                pst = conn.prepareStatement("insert into payroll_schema.timemonitor_tbl (id,lastname,firstname,date_in,time_in,status) values (" + usr + ",'" + lsname + "','" + frname + "','" + ds + "','" + ts + "','Logged In');");
                                pst.execute();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }
                            //this.dispose();
                        }

                    } else {
                        JOptionPane.showMessageDialog(rootPane, "ID or Password is incorrect", "Error", 1);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
            // </editor-fold>
        }
    }//GEN-LAST:event_inputUNKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Thread.sleep(5000);
                } catch (Exception e) {
                }
                new login().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clock;
    private javax.swing.JPasswordField inputPass;
    private javax.swing.JTextField inputUN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

}
